{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3d531da8-f5e7-4979-9c95-a2dd12c8298e",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "(multilevel_hgf)=\n",
    "# Hierarchical Bayesian modelling with probabilistic neural networks"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ab7fa0a5-7fc9-47b8-96da-4ff5820a8f70",
   "metadata": {
    "editable": true,
    "execution": {
     "iopub.execute_input": "2023-11-06T08:59:25.111871Z",
     "iopub.status.busy": "2023-11-06T08:59:25.110906Z",
     "iopub.status.idle": "2023-11-06T08:59:25.122657Z",
     "shell.execute_reply": "2023-11-06T08:59:25.121477Z"
    },
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/ilabcode/pyhgf/blob/master/docs/source/notebooks/3-Multilevel_HGF.ipynb)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ba34f2ab-bca8-499d-bfd5-f2c022409b50",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": [
     "hide-cell"
    ]
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "import sys\n",
    "\n",
    "if 'google.colab' in sys.modules:\n",
    "    !pip install pyhgf watermark"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b2718c0d-5a41-4f56-89be-80318f9ab728",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": [
     "hide-cell"
    ]
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "An NVIDIA GPU may be present on this machine, but a CUDA-enabled jaxlib is not installed. Falling back to cpu.\n"
     ]
    }
   ],
   "source": [
    "import arviz as az\n",
    "import jax.numpy as jnp\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pymc as pm\n",
    "import pytensor.tensor as pt\n",
    "import seaborn as sns\n",
    "from pyhgf import load_data\n",
    "from pyhgf.distribution import HGFDistribution, HGFPointwise\n",
    "from pyhgf.model import HGF\n",
    "from pyhgf.response import binary_softmax_inverse_temperature\n",
    "\n",
    "plt.rcParams[\"figure.constrained_layout.use\"] = True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "20aba0ed-e8c6-4276-8778-496528d41232",
   "metadata": {},
   "outputs": [],
   "source": [
    "np.random.seed(123)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dbef25ef-44e0-4d35-bfa4-5be3bb3a393e",
   "metadata": {},
   "source": [
    "In the previous tutorials, we have fitted the binary, categorical and continuous Hierarchical Gaussian Filters (HGF) to observations to infer the values of specific parameters of the networks. proceeding this way, we were simulating computations occurring at the agent level (i.e. both the observations and actions were made by one agent, and we estimated the posterior density distribution of parameters for that agent). However, many situations in experimental neuroscience and computational psychiatry will require us to go one step further and to make inferences at the population level, therefore fitting many models at the same time and estimating the density distribution of hyper-priors (see for example case studies from {cite:p}`2014:lee`). \n",
    "\n",
    "Luckily, we already have all the components in place to do that. We already used Bayesian networks in the previous sections when we were inferring the distribution of some parameters. Here, we only had one agent (i.e. one participant), and therefore did not need any hyperprior. We need to extend this approach a bit, and explicitly state that we want to fit many models (participants) simultaneously, and draw the values of some parameters from a hyper-prior (i.e. the group-level distribution).\n",
    "\n",
    "But before we move forward, maybe it is worth clarifying some of the terminology we use, especially as, starting from now, many things are called **networks** but are pointing to different parts of the workflow. We can indeed distinguish two kinds:\n",
    "1. The predictive coding neural networks. This is the kind of network that [pyhgf](https://github.com/ilabcode/pyhgf) is designed to handle (see {ref}`probabilistic_networks`). Every HGF model is an instance of such a network.\n",
    "2. The Bayesian (multilevel) network is the computational graph that is created with tools like [pymc](https://www.pymc.io/welcome.html). This graph will represent the dependencies between our variables and the way they are transformed.\n",
    "\n",
    "In this notebook, we are going to create the second type of network and incorporate many networks of the first type in it as custom distribution."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "53466426-074d-4f49-b006-5086fb77a597",
   "metadata": {},
   "source": [
    "## Simulate a dataset\n",
    "We start by simulating a dataset containing the decisions from a group of participants undergoing a standard one-armed bandit task. We use the same binary time series as a reference as the previous tutorials. This would represent the association between the stimuli and the outcome, the experimenter controls this and here we assume all participants are presented with the same sequence of association."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "14bd6de6-10d1-4440-861b-f6af6fe940c9",
   "metadata": {},
   "outputs": [],
   "source": [
    "u, _ = load_data(\"binary\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "38710a5d-57d8-48b7-9257-862fd2c9236c",
   "metadata": {},
   "source": [
    "Using the same reasoning as in the previous tutorial {ref}`custom_response_functions`, we simulate the trajectories of beliefs from participants being presented with this sequence of observation. Here, we vary one parameter in the perceptual model, we assume that the tonic volatility ($\\omega$) from the second level is sampled from a population distribution such as: \n",
    "\n",
    "$$\n",
    "\\omega_{2_i} \\sim \\mathcal{N}(-4.0, 1.0)\n",
    "$$\n",
    "\n",
    "This produces belief trajectories that can be used to infer propensity for decision at each time point. Moreover, we will assume that the decision function incorporates the possibility of a bias in the link between the belief and the decision in the form of the inverse temperature parameter, such as:\n",
    "\n",
    "$$\n",
    "P(A|\\mu, t) = \\frac{\\mu^t}{\\mu^t + (1-\\mu)^t}\n",
    "$$\n",
    "\n",
    "Where $A$ is a positive association between the stimulus and the outcome, $\\mu = \\hat{\\mu}_1^{(k)}$, the expected probability from the first level and $t$ is the temperature parameter. We sample the temperature parameter from a log-normal distribution to ensure positivity such as:\n",
    "\n",
    "$$\n",
    "z_{i} \\sim \\mathcal{N}(0.5, 0.5) \\\\\n",
    "temperature = e^z\n",
    "$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e590009e-89c1-410a-a05b-8a2c34e10b65",
   "metadata": {},
   "outputs": [],
   "source": [
    "def sigmoid(x, temperature):\n",
    "    \"\"\"The sigmoid response function with inverse temperature parameter.\"\"\"\n",
    "    return (x**temperature) / (x**temperature + (1 - x) ** temperature)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "710fa85f-ea28-4405-97f5-43a93e1850b9",
   "metadata": {
    "editable": true,
    "scrolled": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": [
     "hide-input"
    ]
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "x = np.linspace(0, 1, 500)\n",
    "sns.set_palette(\"rocket\")\n",
    "for temp in [0.5, 1.0, 6.0, 64.0]:\n",
    "    plt.plot(x, sigmoid(x, temp), label=rf\"$ \\lambda = {temp}$\")\n",
    "plt.title(\"The unit square sigmoid function\")\n",
    "plt.legend()\n",
    "sns.despine();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b4f45d4c-3dbf-4b35-a719-55a53e5bac98",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "N = 10  # number of agents/participants in the study\n",
    "\n",
    "# create just one default network - we will simply change the values of interest before fitting to save time\n",
    "agent = HGF(\n",
    "    n_levels=2,\n",
    "    verbose=False,\n",
    "    model_type=\"binary\",\n",
    "    initial_mean={\"1\": 0.5, \"2\": 0.0},\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "81e72352-779b-4ed0-9bf4-e593a7c55c90",
   "metadata": {},
   "outputs": [],
   "source": [
    "# observations (always the same), simulated decisions, sample values for temperature and volatility\n",
    "responses = []\n",
    "for i in range(N):\n",
    "    # sample one new value of the tonic volatility at the second level and fit to observations\n",
    "    volatility = np.random.normal(-4.0, 1.0)\n",
    "    agent.attributes[2][\"tonic_volatility\"] = volatility\n",
    "    agent.input_data(input_data=u)\n",
    "\n",
    "    # sample one value for the inverse temperature (here in log space) and simulate responses\n",
    "    temperature = np.exp(np.random.normal(0.5, 0.5))\n",
    "    p = sigmoid(x=agent.node_trajectories[1][\"expected_mean\"], temperature=temperature)\n",
    "\n",
    "    # store observations and decisions separately\n",
    "    responses.append(np.random.binomial(p=p, n=1))\n",
    "responses = np.array(responses)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6e283a78-329c-470c-8f62-7fb12b5b5861",
   "metadata": {
    "tags": []
   },
   "source": [
    "## Group-level inference\n",
    "\n",
    "In this section, we start embedding the HGF in a multilevel model using PyMC. We use the same core distribution (the [HGFDistribution class](pyhgf.distribution.HGFDistribution)) and leverage the possibility of automatic broadcasting to apply the same procedure to multiple HGF models in parallel. Note that the input data, time steps and responses should be provided as a Numpy array where the first dimension is the number of models to fit in parallel (in that case this corresponds to the number of participants). Thanks to automatic broadcasting, we can parametrize our distributions either using a float or using a vector that maps the number of models."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48020213-7f26-4201-b4b9-f072231bc225",
   "metadata": {},
   "source": [
    "```{note} Using automatic broadcasting\n",
    "To estimate group-level parameters, we will have to fit multiple models at the same time, either on different input data, on the same data with different parameters or on different datasets with different parameters. This step is handled natively both by the [log probability function](pyhgf.distribution.hgf_logp) and the [HGFDistribution class](pyhgf.distribution.HGFDistribution) using a pseudo [broadcasting](https://numpy.org/doc/stable/user/basics.broadcasting.html) approach. When a list of *n* input time series is provided, the function will automatically apply *n* models using the provided parameters. If for some parameters an array of length *n* is provided, each model will use the n-th value as a parameter. Here, we are going to rely on this feature to compute the log probability of *n* model, using *n* time series as input and *n* different parameters to test.\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d8626211-c4d0-4347-8711-2af1474b98a2",
   "metadata": {},
   "source": [
    "```{hint} Observing the observer\n",
    "As we explained in the first part of the tutorials, probabilistic networks *observe* their environment through the inputs they receive and update beliefs using inversion of the generative model they assume for this environment. Here, we are taking a step back and want to use actions from agents that we assume are using such networks to make decisions to infer the values of some parameters from those networks. This is often referred to as *observing the observer* and this comes with a different concept of observations. Here, observations are the behaviours we can observe from the network and are directly influenced by the response model we define (i.e. how an agent uses its beliefs to act on the environment). The input data that are fed to the network are fixed, therefore we declare it when we create the HGF function compatible with [PyTensor](https://pytensor.readthedocs.io). The actions, or responses we get from the participant, are the things we want to explain using the PyMC model, therefor we treat it as observation in a custom distribution, a distribution that can simulate the behaviour of HGF networks under a set of parameters.\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e3cb9a9e-951f-4048-b04b-c985028dba2d",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "hgf_logp_op = HGFDistribution(\n",
    "    n_levels=2,\n",
    "    model_type=\"binary\",\n",
    "    input_data=u[np.newaxis, :].repeat(\n",
    "        N, axis=0\n",
    "    ),  # the inputs are the same for all agents - just duplicate the array\n",
    "    response_function=binary_softmax_inverse_temperature,\n",
    "    response_function_inputs=responses,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "7ab89a5c-a0fe-45f7-83fe-a278f8d80a34",
   "metadata": {},
   "outputs": [],
   "source": [
    "def logp(value, tonic_volatility_2, inverse_temperature):\n",
    "    return hgf_logp_op(\n",
    "        tonic_volatility_2=tonic_volatility_2,\n",
    "        response_function_parameters=pt.flatten(inverse_temperature),\n",
    "    )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5112c4f5-2bdb-4f3e-a8ee-43216711e30d",
   "metadata": {},
   "source": [
    "```{note} Pointwise log probabilities\n",
    "Model comparison requires pointwise estimates of the log probabilities of a model (i.e. one estimate per observation), while the log-probability function used internally by the custom distribution works with the sum of the log-probabilities. We therefore need to compute this a second time without summing. We are doing this during inference using the [HGFPointwise class](pyhgf.distribution.HGFPointwise) class. This class works exactly like [HGFDistribution class](pyhgf.distribution.HGFDistribution) and should simply be treated as a deterministic variable for later use.\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "a222b524-fa7f-4f4f-9ced-c7c70521b0f1",
   "metadata": {},
   "outputs": [],
   "source": [
    "hgf_logp_op_pointwise = HGFPointwise(\n",
    "    n_levels=2,\n",
    "    model_type=\"binary\",\n",
    "    input_data=u[np.newaxis, :].repeat(\n",
    "        N, axis=0\n",
    "    ),  # the inputs are the same for all agents - just duplicate the array\n",
    "    response_function=binary_softmax_inverse_temperature,\n",
    "    response_function_inputs=responses,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "6d94b1c0-16fa-4e39-a4dd-32125d13247d",
   "metadata": {},
   "outputs": [],
   "source": [
    "def logp_pointwise(tonic_volatility_2, inverse_temperature):\n",
    "    return hgf_logp_op_pointwise(\n",
    "        tonic_volatility_2=tonic_volatility_2,\n",
    "        response_function_parameters=inverse_temperature,\n",
    "    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "b7d84b8a-b398-4c10-b001-d3743a38de16",
   "metadata": {},
   "outputs": [],
   "source": [
    "with pm.Model() as two_levels_binary_hgf:\n",
    "\n",
    "    # tonic volatility\n",
    "    # ----------------\n",
    "    mu_volatility = pm.Normal(\"mu_volatility\", -5, 5)\n",
    "    sigma_volatility = pm.HalfNormal(\"sigma_volatility\", 10)\n",
    "    volatility = pm.Normal(\n",
    "        \"volatility\", mu=mu_volatility, sigma=sigma_volatility, shape=N\n",
    "    )\n",
    "\n",
    "    # inverse temperature\n",
    "    # -------------------\n",
    "    mu_temperature = pm.Normal(\"mu_temperature\", 0, 2)\n",
    "    sigma_temperature = pm.HalfNormal(\"sigma_temperature\", 2)\n",
    "    inverse_temperature = pm.LogNormal(\n",
    "        \"inverse_temperature\", mu=mu_temperature, sigma=sigma_temperature, shape=N\n",
    "    )\n",
    "\n",
    "    # The multi-HGF distribution\n",
    "    # --------------------------\n",
    "    log_likelihood = pm.CustomDist(\n",
    "        \"log_likelihood\",\n",
    "        volatility,\n",
    "        inverse_temperature,\n",
    "        logp=logp,\n",
    "        observed=responses,\n",
    "    )\n",
    "\n",
    "    # pointwise log-likelihoods\n",
    "    # -------------------------\n",
    "    pm.Deterministic(\n",
    "        \"pointwise_loglikelihood\",\n",
    "        logp_pointwise(volatility, inverse_temperature),\n",
    "    )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7d0e01e8-b6d2-43e7-b4ac-0476439156cd",
   "metadata": {},
   "source": [
    "### Plot the computational graph\n",
    "The multilevel model includes hyperpriors over the mean and standard deviation of both the inverse temperature and the tonic volatility of the second level.\n",
    "\n",
    "```{note}\n",
    "We are sampling the inverse temperature in log space to ensure it will always be higher than 0, while being able to use normal hyper-priors at the group level.\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "2627d47c-4aa6-4f8e-b073-f2d2a1f5be95",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n",
       "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n",
       " \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n",
       "<!-- Generated by graphviz version 9.0.0 (20231125.0833)\n",
       " -->\n",
       "<!-- Pages: 1 -->\n",
       "<svg width=\"808pt\" height=\"388pt\"\n",
       " viewBox=\"0.00 0.00 808.18 388.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n",
       "<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 384)\">\n",
       "<polygon fill=\"white\" stroke=\"none\" points=\"-4,4 -4,-384 804.18,-384 804.18,4 -4,4\"/>\n",
       "<g id=\"clust1\" class=\"cluster\">\n",
       "<title>cluster10</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M223.54,-141.75C223.54,-141.75 579.54,-141.75 579.54,-141.75 585.54,-141.75 591.54,-147.75 591.54,-153.75 591.54,-153.75 591.54,-255.5 591.54,-255.5 591.54,-261.5 585.54,-267.5 579.54,-267.5 579.54,-267.5 223.54,-267.5 223.54,-267.5 217.54,-267.5 211.54,-261.5 211.54,-255.5 211.54,-255.5 211.54,-153.75 211.54,-153.75 211.54,-147.75 217.54,-141.75 223.54,-141.75\"/>\n",
       "<text text-anchor=\"middle\" x=\"574.54\" y=\"-149.7\" font-family=\"Times,serif\" font-size=\"14.00\">10</text>\n",
       "</g>\n",
       "<g id=\"clust2\" class=\"cluster\">\n",
       "<title>cluster10 x 320</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M157.54,-8C157.54,-8 638.54,-8 638.54,-8 644.54,-8 650.54,-14 650.54,-20 650.54,-20 650.54,-121.75 650.54,-121.75 650.54,-127.75 644.54,-133.75 638.54,-133.75 638.54,-133.75 157.54,-133.75 157.54,-133.75 151.54,-133.75 145.54,-127.75 145.54,-121.75 145.54,-121.75 145.54,-20 145.54,-20 145.54,-14 151.54,-8 157.54,-8\"/>\n",
       "<text text-anchor=\"middle\" x=\"611.42\" y=\"-15.95\" font-family=\"Times,serif\" font-size=\"14.00\">10 x 320</text>\n",
       "</g>\n",
       "<!-- mu_volatility -->\n",
       "<g id=\"node1\" class=\"node\">\n",
       "<title>mu_volatility</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"76.54\" cy=\"-337.75\" rx=\"76.54\" ry=\"42.25\"/>\n",
       "<text text-anchor=\"middle\" x=\"76.54\" y=\"-350.32\" font-family=\"Times,serif\" font-size=\"14.00\">mu_volatility</text>\n",
       "<text text-anchor=\"middle\" x=\"76.54\" y=\"-333.07\" font-family=\"Times,serif\" font-size=\"14.00\">~</text>\n",
       "<text text-anchor=\"middle\" x=\"76.54\" y=\"-315.82\" font-family=\"Times,serif\" font-size=\"14.00\">Normal</text>\n",
       "</g>\n",
       "<!-- volatility -->\n",
       "<g id=\"node6\" class=\"node\">\n",
       "<title>volatility</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"275.54\" cy=\"-217.25\" rx=\"55.86\" ry=\"42.25\"/>\n",
       "<text text-anchor=\"middle\" x=\"275.54\" y=\"-229.82\" font-family=\"Times,serif\" font-size=\"14.00\">volatility</text>\n",
       "<text text-anchor=\"middle\" x=\"275.54\" y=\"-212.57\" font-family=\"Times,serif\" font-size=\"14.00\">~</text>\n",
       "<text text-anchor=\"middle\" x=\"275.54\" y=\"-195.32\" font-family=\"Times,serif\" font-size=\"14.00\">Normal</text>\n",
       "</g>\n",
       "<!-- mu_volatility&#45;&gt;volatility -->\n",
       "<g id=\"edge1\" class=\"edge\">\n",
       "<title>mu_volatility&#45;&gt;volatility</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M128.05,-306.08C157.02,-288.83 193.13,-267.32 222.37,-249.91\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"223.9,-253.08 230.7,-244.95 220.32,-247.06 223.9,-253.08\"/>\n",
       "</g>\n",
       "<!-- sigma_temperature -->\n",
       "<g id=\"node2\" class=\"node\">\n",
       "<title>sigma_temperature</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"480.54\" cy=\"-337.75\" rx=\"109.96\" ry=\"42.25\"/>\n",
       "<text text-anchor=\"middle\" x=\"480.54\" y=\"-350.32\" font-family=\"Times,serif\" font-size=\"14.00\">sigma_temperature</text>\n",
       "<text text-anchor=\"middle\" x=\"480.54\" y=\"-333.07\" font-family=\"Times,serif\" font-size=\"14.00\">~</text>\n",
       "<text text-anchor=\"middle\" x=\"480.54\" y=\"-315.82\" font-family=\"Times,serif\" font-size=\"14.00\">HalfNormal</text>\n",
       "</g>\n",
       "<!-- inverse_temperature -->\n",
       "<g id=\"node5\" class=\"node\">\n",
       "<title>inverse_temperature</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"466.54\" cy=\"-217.25\" rx=\"116.85\" ry=\"42.25\"/>\n",
       "<text text-anchor=\"middle\" x=\"466.54\" y=\"-229.82\" font-family=\"Times,serif\" font-size=\"14.00\">inverse_temperature</text>\n",
       "<text text-anchor=\"middle\" x=\"466.54\" y=\"-212.57\" font-family=\"Times,serif\" font-size=\"14.00\">~</text>\n",
       "<text text-anchor=\"middle\" x=\"466.54\" y=\"-195.32\" font-family=\"Times,serif\" font-size=\"14.00\">LogNormal</text>\n",
       "</g>\n",
       "<!-- sigma_temperature&#45;&gt;inverse_temperature -->\n",
       "<g id=\"edge3\" class=\"edge\">\n",
       "<title>sigma_temperature&#45;&gt;inverse_temperature</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M475.65,-295.3C474.73,-287.5 473.75,-279.24 472.79,-271.15\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"476.29,-270.89 471.64,-261.37 469.34,-271.72 476.29,-270.89\"/>\n",
       "</g>\n",
       "<!-- sigma_volatility -->\n",
       "<g id=\"node3\" class=\"node\">\n",
       "<title>sigma_volatility</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"261.54\" cy=\"-337.75\" rx=\"90.86\" ry=\"42.25\"/>\n",
       "<text text-anchor=\"middle\" x=\"261.54\" y=\"-350.32\" font-family=\"Times,serif\" font-size=\"14.00\">sigma_volatility</text>\n",
       "<text text-anchor=\"middle\" x=\"261.54\" y=\"-333.07\" font-family=\"Times,serif\" font-size=\"14.00\">~</text>\n",
       "<text text-anchor=\"middle\" x=\"261.54\" y=\"-315.82\" font-family=\"Times,serif\" font-size=\"14.00\">HalfNormal</text>\n",
       "</g>\n",
       "<!-- sigma_volatility&#45;&gt;volatility -->\n",
       "<g id=\"edge2\" class=\"edge\">\n",
       "<title>sigma_volatility&#45;&gt;volatility</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M266.44,-295.3C267.37,-287.41 268.36,-279.05 269.33,-270.86\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"272.8,-271.32 270.5,-260.97 265.85,-270.49 272.8,-271.32\"/>\n",
       "</g>\n",
       "<!-- mu_temperature -->\n",
       "<g id=\"node4\" class=\"node\">\n",
       "<title>mu_temperature</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"704.54\" cy=\"-337.75\" rx=\"95.64\" ry=\"42.25\"/>\n",
       "<text text-anchor=\"middle\" x=\"704.54\" y=\"-350.32\" font-family=\"Times,serif\" font-size=\"14.00\">mu_temperature</text>\n",
       "<text text-anchor=\"middle\" x=\"704.54\" y=\"-333.07\" font-family=\"Times,serif\" font-size=\"14.00\">~</text>\n",
       "<text text-anchor=\"middle\" x=\"704.54\" y=\"-315.82\" font-family=\"Times,serif\" font-size=\"14.00\">Normal</text>\n",
       "</g>\n",
       "<!-- mu_temperature&#45;&gt;inverse_temperature -->\n",
       "<g id=\"edge4\" class=\"edge\">\n",
       "<title>mu_temperature&#45;&gt;inverse_temperature</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M641.7,-305.46C611.88,-290.61 575.95,-272.72 544.41,-257.02\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"546.2,-254 535.69,-252.68 543.08,-260.27 546.2,-254\"/>\n",
       "</g>\n",
       "<!-- log_likelihood -->\n",
       "<g id=\"node7\" class=\"node\">\n",
       "<title>log_likelihood</title>\n",
       "<ellipse fill=\"lightgrey\" stroke=\"black\" cx=\"498.54\" cy=\"-83.5\" rx=\"144.43\" ry=\"42.25\"/>\n",
       "<text text-anchor=\"middle\" x=\"498.54\" y=\"-96.07\" font-family=\"Times,serif\" font-size=\"14.00\">log_likelihood</text>\n",
       "<text text-anchor=\"middle\" x=\"498.54\" y=\"-78.82\" font-family=\"Times,serif\" font-size=\"14.00\">~</text>\n",
       "<text text-anchor=\"middle\" x=\"498.54\" y=\"-61.57\" font-family=\"Times,serif\" font-size=\"14.00\">CustomDist_log_likelihood</text>\n",
       "</g>\n",
       "<!-- inverse_temperature&#45;&gt;log_likelihood -->\n",
       "<g id=\"edge5\" class=\"edge\">\n",
       "<title>inverse_temperature&#45;&gt;log_likelihood</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M476.58,-174.92C479.5,-162.9 482.73,-149.6 485.8,-136.99\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"489.12,-138.15 488.08,-127.6 482.31,-136.49 489.12,-138.15\"/>\n",
       "</g>\n",
       "<!-- pointwise_loglikelihood -->\n",
       "<g id=\"node8\" class=\"node\">\n",
       "<title>pointwise_loglikelihood</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"335.79,-113.37 153.29,-113.37 153.29,-53.62 335.79,-53.62 335.79,-113.37\"/>\n",
       "<text text-anchor=\"middle\" x=\"244.54\" y=\"-96.07\" font-family=\"Times,serif\" font-size=\"14.00\">pointwise_loglikelihood</text>\n",
       "<text text-anchor=\"middle\" x=\"244.54\" y=\"-78.82\" font-family=\"Times,serif\" font-size=\"14.00\">~</text>\n",
       "<text text-anchor=\"middle\" x=\"244.54\" y=\"-61.57\" font-family=\"Times,serif\" font-size=\"14.00\">Deterministic</text>\n",
       "</g>\n",
       "<!-- inverse_temperature&#45;&gt;pointwise_loglikelihood -->\n",
       "<g id=\"edge7\" class=\"edge\">\n",
       "<title>inverse_temperature&#45;&gt;pointwise_loglikelihood</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M406.47,-180.6C374.47,-161.6 335.25,-138.33 303.43,-119.45\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"305.5,-116.6 295.11,-114.51 301.93,-122.62 305.5,-116.6\"/>\n",
       "</g>\n",
       "<!-- volatility&#45;&gt;log_likelihood -->\n",
       "<g id=\"edge6\" class=\"edge\">\n",
       "<title>volatility&#45;&gt;log_likelihood</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M301.5,-179.31C312.33,-166.02 325.82,-151.84 340.54,-141.75 354.17,-132.42 369.49,-124.41 385.1,-117.61\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"386.11,-120.98 393.98,-113.89 383.41,-114.52 386.11,-120.98\"/>\n",
       "</g>\n",
       "<!-- volatility&#45;&gt;pointwise_loglikelihood -->\n",
       "<g id=\"edge8\" class=\"edge\">\n",
       "<title>volatility&#45;&gt;pointwise_loglikelihood</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M265.91,-175.28C262.13,-159.24 257.81,-140.88 254.05,-124.89\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"257.47,-124.13 251.77,-115.2 250.65,-125.74 257.47,-124.13\"/>\n",
       "</g>\n",
       "</g>\n",
       "</svg>\n"
      ],
      "text/plain": [
       "<graphviz.graphs.Digraph at 0x7ff374552f00>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pm.model_to_graphviz(two_levels_binary_hgf)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ee804ce-aae3-4228-aa16-aaa07b337c5c",
   "metadata": {},
   "source": [
    "### Sampling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "3e98e263-093d-45cd-afea-e3cd316a2591",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Auto-assigning NUTS sampler...\n",
      "Initializing NUTS using jitter+adapt_diag...\n",
      "Sequential sampling (2 chains in 1 job)\n",
      "NUTS: [mu_volatility, sigma_volatility, volatility, mu_temperature, sigma_temperature, inverse_temperature]\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "457ee01162d4499a82c38c4014e4de62",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Output()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n"
      ],
      "text/plain": []
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "4fb52a176dad4cf7bcb21959bf000ca3",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Output()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n"
      ],
      "text/plain": []
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Sampling 2 chains for 1_000 tune and 1_000 draw iterations (2_000 + 2_000 draws total) took 60 seconds.\n",
      "We recommend running at least 4 chains for robust computation of convergence diagnostics\n"
     ]
    }
   ],
   "source": [
    "with two_levels_binary_hgf:\n",
    "    two_level_hgf_idata = pm.sample(chains=2, cores=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "df9a3b00-c476-4700-a1ed-a200344c2b03",
   "metadata": {},
   "outputs": [],
   "source": [
    "# save pointwise estimate as log_likelihood for later use in model comparison\n",
    "two_level_hgf_idata.add_groups(\n",
    "    log_likelihood=two_level_hgf_idata.posterior[\"pointwise_loglikelihood\"]\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c7305635-b420-4d54-8015-72c0f3a03748",
   "metadata": {},
   "source": [
    "### Visualization of the posterior distributions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "506039b8-80a4-40d5-97e5-31f425535b5e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABcsAAAIzCAYAAADf8kEsAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8fJSN1AAAACXBIWXMAAA9hAAAPYQGoP6dpAAD3nUlEQVR4nOzdd1hUZ97G8e/QBRRUVBAUC/ZesBfsGo09iSYb07PJprjpu5ts2rspm7Lp2U03vZqYxBYb9gIW7AVELNgVRHqZ8/4xzOgIKihwBrg/15Xrdc45c849I+t7nh/P+T0WwzAMRERERERERERERESqMTezA4iIiIiIiIiIiIiImE3FchERERERERERERGp9lQsFxEREREREREREZFqT8VyEREREREREREREan2VCwXERERERERERERkWpPxXIRERERERERERERqfZULBcRERERERERERGRak/FchERERERERERERGp9lQsFxEREREREREREZFqT8VyEREREREREZEK8uyzz2KxWHj22Wcr7JpNmjTBYrGQlJTktP3WW2/FYrEwY8YMp+0zZszAYrFw6623VlhGERFXoGK5iMhlJCUl8eyzzxa5gZTyN2vWLJ599lni4uLMjiIiIiIi4pIq8p45NTWVZ599ljfffLPcryUiYgYVy0VELiMpKYnnnntOxXITzJo1i+eee07FchERERGRiyjJPXPz5s1p1aoVnp6eJTpnQEAArVq1IiQkxGl7amoqzz33nIrlIlJleZgdQEREREREREREys/ixYtLdfyECROYMGFCOaUREXFdmlkuIiIiIiIiIiIiItWeiuUiUmEsFgsWiwWAX375hT59+uDv70+DBg245ZZbOHr0qOPYzz77jG7duuHn50f9+vW55557OHPmTJFzXm5xnKtdmCYqKopBgwYBsGzZMsdnsFgsNGnSpMjxMTExTJkyhdDQULy8vGjQoAHXXXcdmzZtKvb85fGdnP+Zz549y8MPP0yTJk3w8fGhWbNmPPnkk2RmZl70M58+fZonn3yS9u3b4+fnR82aNenVqxcfffQRVqu1yPHnLwq0b98+br31VkJDQ/Hw8HD8vRQUFPDrr79y++23065dOwICAvD19aVNmzY8/vjjnDx50umcSUlJWCwWPv/8cwBuu+02p+/efl77ccX9XRT3HV9s+8yZMxkwYACBgYFFFj4q7fchIiIiUp1Vxnv+Rx99FIvFwv3333/RY7Zt24bFYqF+/frk5+c77du+fTs333wzYWFhjjHApEmTWLt2balylNc9M1x8gc+LKe47vfXWW2natCkA+/fvd7qW/e98ypQpWCwWXn/99Yue+6effsJisRAZGVmiLCIiFUnFchGpcO+88w4TJ07k4MGDREREcObMGb744guGDBlCdnY206dP5/bbbyc1NZWmTZuSkpLCBx98wLhx4zAMo0KzdujQgfbt2wNQq1Yt+vbt6/jvwpu7N954g169evH999+TnZ1N+/btKSgo4KeffqJnz578/PPPF71OeXwnOTk5DBw4kDfffBN/f39atGhBUlISL774IkOGDCm2YL59+3Y6duzIiy++SHx8PE2aNKFBgwbExMRw9913c8MNN1z0ert376Zr16589913BAcH06JFC8dN85EjRxg/fjyff/45KSkpREREEB4eTlJSEq+++iqRkZEcO3bMcS4fHx/69u1L/fr1AWjRooXTd9+4ceNL/K2Vzr///W8mT57Mnj17aNmyJfXq1SuT70NERESkOqtM9/w33ngjAD/++CMFBQXFHvPNN98AcN111+Hhca6j7W+//Ua3bt346quvyMjIoFOnThiGwc8//0zfvn356KOPSpzDle+ZAVq2bEn37t0B8Pb2drpW3759Abj99tsBHAX84tj3XekvN0REypUhIlJBAAMw/Pz8jG+++cax/eDBg0ZERIQBGOPHjzcCAgKMRYsWOfZv2bLFqFOnjgEYc+fOdTrnM888YwDGM888U+w1P/vsMwMwbrnllivOHR0dbQDGwIEDL3rMvHnzDIvFYgQFBRkzZ8502vfxxx8bHh4eRs2aNY3Dhw877SuP78T+mT08PIzQ0FAjLi7OsW/r1q1Go0aNDMB49NFHnd6Xnp5uNG/e3ACMBx980Dhz5oxj3/bt24127doZgPHuu+86ve+WW24xAMPd3d0YO3ascerUKce+rKwswzAMIzU11ZgxY4bTPsMwjJSUFOP+++83AOPWW28t8r3az/3ZZ58V2WcYhrFv3z4DMMLDw4vdbxjnvuOLbffy8jI+/PBDw2q1GoZhGHl5eUZeXt4Vfx8iIiIi1Vllvedv3bq1ARh//PFHsfubNm1qAMbKlSsd25KTk41atWoZgDF9+nQjJyfHMAzDKCgoMF544QUD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y5cvL7ZgbbFYHIOPhx9+2GkxqM8//5xPP/201FntyvP7EBEREZGSq4h7frtJkybh7e3NwoULHUVwewH9Qvfeey+1atUiLi6Ohx56iNzcXMC2KOgrr7zCnDlz8PT05JFHHinRtcvrnrks1atXj5o1a3L8+HF27tx5yWN79OhB+/btWb9+Pb/++iteXl7FztAXEXElKpaLSKVWu3ZtnnzyScBW3AwLC6N79+40bNiQFStWOPZdjXr16jF48GDS09Np3rw5vXr1IioqiilTpjiOueaaa3jnnXfIycnhrrvuok6dOnTv3p3IyEiCg4Np3rw5Tz311EX7GZaHyZMnExQURKdOnejQoQMdO3akffv27N+/n8jISJ577jmn4/39/ZkzZw5Nmzbl22+/JSwsjLZt29KrVy9atWpFYGAgN9xwA6tXry51lueeew5vb29+++03QkND6d69O2FhYdxyyy1MmTKFnj17Fvu+CRMm4OXlxXfffUfTpk0ZMGAAUVFRzJgxw+nc/v7+LFiwgODgYLp160bDhg259dZbef3110ud1a48vw8RERERKbmKuOe3CwwMZNSoUeTn57No0SLc3Ny4/vrriz22YcOGfPnll3h5efHmm28SHBxMjx49CAkJ4YknnsDNzY13332Xjh07luja5XnPXFYsFgvXXXcdAF27diUyMpKoqKiLruFz2223AZCfn8/YsWOpU6dOmWcSESlLKpaLSKX31FNP8d5779G2bVtOnDjBwYMHmTx5MuvXryc8PLxMrvHNN99w6623UqtWLTZs2MCyZctYu3at0zH33XcfcXFx3HnnndSrV4/t27cTHx9PUFAQU6dO5ccff2TatGllkqckvL29WbZsGdOnTyctLY3du3fTuHFj/va3vxEdHe3o/Xi+1q1bs3nzZl5++WUiIyNJTk4mLi6O3NxcBg4cyGuvvXZFj7l269aN5cuXM2zYMKxWK7t27aJ+/fq8/fbbjkcyi9O8eXN+//13Bg4cSEpKCitXrmTZsmVOC6W2bt2a5cuXM3LkSNzc3Ni9ezdNmzbl999/55577il11vOV1/chIiIiIqVTEff8dufPJB80aBAhISEXPXbs2LFs2LCBm266CR8fH+Li4jAMgwkTJrBy5UruvvvuEl+3PO+Zy9Jbb73F9OnTCQ4OZvPmzSxbtoxly5YVe+zNN9+Mu7s7oBYs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Veuqzycirk/FchGRK9SrVy+GDBlCdHQ0Dz30EOnp6RiGwcLfbDdpQ8cOYsGCBU799lq2bAnAhx9+6PSY44oVK5wWvHQV06dPx93dnf/973+sXbvWsT0+Pp4XXngBd3f3IrNZkpOTad26dZGCd8t2EfTu2h+A//znP2zatMmx7/jx40yfPh2w9TNXL0ARERERkeIVNw45n9VqLTIOadbMtkjoicwjhDU91xfdVcchJdGlZ0cAEnfv4/TJlMse//e//53WrVvz7rvvOm3/6aef2LNnT5Hjly1bxl133QXAX/7ylzJILCKVgYrlIiJX4euvv6Zjx468+eabhIeH06d3H5as/4Pdp7dwy71/YsSIEaxfv95x/IMPPoifnx/vv/8+7du3Z+rUqQwYMICBAwdyzz33mPhJiteqVSteffVVcnJy6N+/P9dccw3jx4+nU6dOnDp1ildffZVWrVo5vScvL4/du3eze/fuIuebdueNNK7VnPSMdHr37s2gQYO49tprad26NRs3bqRr16689NJLRd43YcIEevXqRa9evfj4448BeP/99x3bJkyYUD5fgIiIiIiIC7pwHDJkyBCmTJlC//79CQ4OLjIOuW7idbhZ3DieeYQBUf1dfhxSEoF1A4loY+vZvmnt5sscDUeOHGH37t1F+qnPnj2bVq1a0bJlS0aMGMH1119Ply5diIqK4vDhw0yZMsUxsUdEqj71LBcRuQoNGjRg7dq1/O9//+P7778nLi6OnJwcavnXomvXrowbN47rr7/ecXzLli2JjY3liSeeYN26dfz222+0atWKDz74gLvuuovXXnvNxE9TvIceeoiIiAheffVVVqxYAUC3bt147LHHGDt2bKnONXz8UBo91xQfjxoEtazFpk2byM7Opnnz5vz1r3/l0UcfxdfXt8j7Nm3aVKTv4cGDBzl48CBQ/IKhIiIiIiJV1YXjkNjYWHJzcwkJCaFLly5FxiHebjVoW7crKRzj5MmTlWIcUhJde3cmYWciG1fHETm88xWd44YbbiA/P58NGzYQExNDeno6derUYdSoUdx+++1Mnjy5bEOLiEuzGBdb7lhERErFMAyu638zBxIP8n/v/ZMRE4aaHcklPfWX51kwazGTbhnHEy89bHYcEREREZEq74dPf+a1p95i4Mh+vPrpC2bHKTPRc5fzxJ3/pFmrpnwXPcPsOCJS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t//5558AtG/f/p7rMgyDbz/5kd9/mcmhK3uIs8bSv39/vvrqq3RlXL16NQAlS5ZM13pERLIbn5w+9B7cA4DERCsv93qdjcFbTE4lIiJiXyKvRzKk5zB2bNpJZNI1AFq1bYmzs/N9Pb5jx44ArFq1Ks1toaGhhIaGAsm90kVE7qR5h6b0fjb52P79l0axb+eB+35sRtdVVKeRu1GxXOyam5sbL774IgAvvvjiLb3Lv/zyS3bt2kWDBg3S9KD69ttvCQoKYvjw4UBy65XP3h7HlO+mcejKHmISo+jevTs///zzHScPTbFv3z5+/vlnYmJiblluGAZ//PEHY8eOxWKx0Ldv34x4ySIi2Yqbe/Kl34EF896Y9PMt/p6+wORUIiIituvHH39MHe0dFxvHsP7vsGf7PiK4SljEKSwWC4MHD07zuKCgIIKCgjhz5swty59//nly5szJ5MmTWbZsWeryyMhInnvuOaxWK+3ataNw4cKZ+8JExO698M4z1G5ck9iYWF576i3OnDgLPHxdZc6cOQQFBdGnT59blq9du5YZM2aQmJh4y/KEhATGjx/Pb7/9hqenJz169MiEVyn2ThN8it179913Wb58ORs2bKB06dKpM7xv3rwZf39/Jk+enOYxly5d4uDBg4SFhZEQn8DHw8ay6M+lnIkIJSohAmdnZ1xcXHj66adv+5wps75Dcm++Z555hmHDhlGjRg0CAwMJDw9n3759hIaG4uTkxBdffKFJI0RE7tPzzz+f2kYr5dLI89fCcLVcJvzcNXr368noY2N54e1nUicHEhERkWSjR49myJAhlC9fnqirMVw6f5lYazSxiTE4OTnx9ddfU7169TSPO3jwIJBcTLpZnjx5mDJlCt27d6d169bUqVOHvHnzsmnTJs6dO0fx4sX58ccfs+S1iYh9c3FxYczPH/JslyEc2nuEl3q/zsS/v3vousq1a9c4ePAggYGBtyw/evQo/fv3JyAggOrVq+Pv78+lS5fYvXs3YWFheHh4MGXKFP2RT25LxXKxex4eHqxatYrRo0czffp05s6di5+fH3379uWjjz666y+/+Lh4hvQcxvaNITg7O1OpZnnOB5/BarUyffr0Oz7u5mJ5hQoV+PDDDwkODubQoUOsX78eJycnChUqxIABA3jhhReoVq1aRr5kERGHtm/fPjZv3nzLsv9OGvbb979zaM9h3h//Dv55cmdlPBEREZs2dOhQli5dyoZ1Gwi/Fo5hGAQGBtKseVdeeumlhxrE06VLFzZs2MAnn3zCunXr2Lp1K4ULF2bo0KEMHz4cf3//THglIuKIvH28GDdtLE93eJ5Tx07zQvdX+fD7dzK0rtK4cWPefvttVq9eza5du7h06RJubm4UK1aMbt268dJLL1GqVKlMfJVizyyGYRhmhxAxw5H9RxnW/x3OngzD28eLj75/jwbN65odS2xYYlwCv7/+AwA9P3sOF3dXkxOJZE+L/1rGqNc/JzYmFv+8ufnw2xHUbKA/SoqIiKSYP2MRH746BovFwqgf36dZ+yZmRxKxaTrXy3onjp7iuW4vc+n8ZUqVK8F3M7/Czz+X2bFE1LNcsh/DMJg1eQ792w3m7MkwChYtwMR536tQLiJiJ1o/1oIpi36kRNniXL5whRd7vMaPY38hIT7h3g8WERFxcIf2HObT4V8CMGhoPxXKRcQmFS1ZmB9mjSMgnz9H9h9jcNeXOXsqzOxYIiqWS/ZyIewiQ/sO57N3xhEXG0/dprWYPP8HSpYtbnY0ERF5ACXKFGPKggl07NkOwzD4ZdxU+rQexO5te82OJiIiYprr4RG8MXAEcbHx1G9WhwGv9Ln3g0RETFK0VBF+mDWOPIEBHD8UyoB2z7F3x36zY0k2p2K5ZAtJSUn8OWUOPZr0Zd3yjbi6uTL0wyGMmzaWXLrMR0TELnl4efDuF2/w8ffvkSu3L0cPHGdgxxf4eOhYLoRdNDueiIhIlkpKSmLkS59w9mQY+QsH8v4372gibBGxeUVLFWHS/B8oXb4UVy5dZXDXl1g0e6nZsSQb055THN62DTvo324wY98eR1REFBWqluPXRT/SY2A3LBaL2fFERCSdWnZuxszVU2nXvTWGYfDP7wvoWr833436iauXw82OJyIikiUmfzON9cs34ubuxqc/f4SvX06zI4mI3Jd8BfLy09zx1G9el7jYeEYO+YSPh44lNjrW7GiSDalYLg5rX8h+Xu3zFs91e4X9Ow/i5e3J0I9eYuI/31GqXEmz44mISAbK5Z+LkeOGM/Hv73ikZiXiYuP49dv/0bFmdz57Zxynjp82O6KIiEim2RT8Lz99NgmAN0a9QlDlMiYnEhF5MN4+Xnw++RMGDe2PxWLhn98X0K/dYA7tPWJ2NMlmVCwXh2IYBts27GDIE0Pp13Yw65dvxNnFmcf7deGvjb/T4+muODs7mx1TREQySeWaFflp7ng+m/QJQZXLEhcbx6zJc+havzeDu77MglmLNUJFREQcStjpc4x44SMMw6BTr3Z07NnO7EgiIg/F2dmZQUP78e2ML/HPm5tjB4/Tv91g/jdhBklJSWbHk2zCYhiGYXYIkfSKjYljxfxVzP71b/Zs3wck/5Jt9Vhz+r/0FEVLFjY5oTiCxLgEfn/9BwB6fvYcLu6uJicSkbsxDIN/121n+o8z2LhqCymHPN45vGnUsh5N2zamTpNaeHi6m5xURETk4cTHxfNMlyHsCzlAUOWy/Dx3PO4e2q+JPCid69meK5euMmrYZ6xZuh6A6vWr8v64t8lXMK/JycTRqVgudu344VDm/DaPhX8u4Xp4BABu7m50eKINTz3fkwKF85ucUByJDqBE7Nf5MxeYP2sx8/5YyNmTYanLPb08qdesNo1bNaBu09rq7yoiInZl9JtfMOe3f8jpl5Opi3/S+Y/IQ9K5nm0yDIO/p8/ny/e+JTYmlhy+Prw5+jVadm5mdjRxYCqWi925ejmclQtWs/ivZezcsjt1ef5CgXTq3Z6OPdsSkNffxITiqHQAJWL/kpKS2PXvHlYuXMOqBas5f/ZC6m3Ozs5UqV2JBi3q0ahlfQoXL2RiUhERkbubP2MRH746BovFwrhpn1K3aW2zI4nYLZ3r2baTx04zcsjH7N2xH4DWj7Xg9U9eJodvDpOTiSNSsVzsQuT1SIIXr2Pp3BX8u3YbVqsVACcnJxq0qMdjT3WgduOa6kcumUoHUCKOxTAM9u88QPCitaxdtoGjB47fcnvx0kVTC+cVq5fXPkZERGzGvpD9PNPlJeLj4hk0tD+DhvYzO5KIXdO5nu1LTEhk0te/MWncVJKSkggsmI/3v3mbanWrmB1NHIyK5WKzYqNjWbt8A0vnrmDDys0kxCek3hZUuSwtOz1Ki06Pkq+A+lVJ1tABlIhjO3MyjHVL17Nm6Qa2bwrBmmhNvS1Xbl8aNK9Lqy7NqdGgmgrnIiJimssXr9C39TNcCLtIo5b1GTvpY5ycnMyOJWLXdK5nP3Zt3cPIIZ9w5sRZLBYLTz3fk2dfH4Crm7aZZAwVy8WmJMQnsCl4C0vmrmDt0g3ERMek3la8dFFadm5G846PasJOMYUOoESyj4hrEWxctYW1yzawYeUmIq5Fpt6WN38e2nZrSbvHW1O0VBETU4qISHYTFxvHi08MZeeW3RQtWYTJCyfgk8Pb7Fgidk/nevYlKjKar0Z+yz+/LwCgbMXSfPzDSNWKJEOoWC6mi42JY/PqfwlevJY1S9bdUpAoUCT/jRHkzShVrgQWi8XEpJLd6QBKJHtKTEgkZMsuVswPZtnfK1MnlAao3agGPQZ2o96jtTWqT0REMlVSUhLvPvchy+etwjuHN5Pn/0Cx0kXNjiXiEHSuZ59WLVrDqGGfc+3qNby8PXnr06G0fqyF2bHEzqlYLqaIvB7JuuUbCV68lg0rNhMbE5t6W0A+f5p3fJSWnR6lQtVyKpCLzdABlIjEx8WzdtkG5s9czMaVm0lKSgKgcPGCdO//GO16tNEIPxERyRTjPviO6T/OxMXVha//9xk1G1QzO5KIw9C5nv26eO4SI174iO0bQwDo8ERbhn38Ep5enuYGE7ulYrlkmSuXrrJmyTqCF61ly9ptJCYkpt4WWDAfTdo0pEmbhjxSq5J6wYpN0gGUiNzszMkw/pw8h79/X0Dk9eSrorx9vOjwRFse79+FwsULmZxQREQcxZTx0/h+9M8AfPjtuxo5KZLBdK5n36xWK798NZVfvvoVwzAoXqYYoyaMpGRQCbOjiR1SsVwy1bnT5wlevJZVC9ewc8vu1BF4kNyDvEnbRjRp05CgSmU0glxsng6gROR2oqOiWfjnUmb+MpvQIycBsFgsNGxRj97P9aBKrcrax4mIyEOb+OUUfvp8MgBD3h3MU8/3NDmRiOPRuZ5j+Hfddt578SMuX7iCu4cbz77+ND2feVwDMuWBOEyx3DAMDMNQv1AbcPxwKMGL1rJq4VoO7Dp4y23lHilL07aNaNK6ofrrid3RAZSI3E1SUhJb1mxjxi9/sn7FptTlFauVp/fgHjRp01AH6iIict8Mw2DC2F+Y/PVvALww/Bn6DultcioRx6RzPcdx5dJVPnh5FBtXbQGSj8VHfPUmxUsXMzeY2A2HKZaHnT5Hp1o9cHN3w8PTHXcPdzw83fHz9yNP/gDyBOYhX4E8FC1ZhOJlipG/UD4V1jOIYRjs33WQ4EVrCV64JnVUHYCTkxNValemaZuGNG7dkMBC+UxMKpI+OoASkft14shJpv80kwWzlhAfFw9AoWIF6fXM47Tv3gYPLw+TE4qIiC2LiY7ho1c/Zfm8VQC8/N7z9B7cw+RUIo5L53qOxTAM/p6+gK8//J6oiChc3VwZ8Eofej/bAw9Pd7PjiY1zmGJ56OETdG/c577v7+7hTvEyxShXuQzlq5SjfJUgipcpiouLSyamdBxWq5WdW3YnF8gXreXcmfOpt7m4ulC7UQ0at25Io1b1yR3gZ2JS+3Lx4kWzI8hdJMYnMP/D/wHQ/r3euLjpAErkQeXJk8fsCFnq8sUrzJo8hz9/ncv1q9cB8PXz5fF+nXl8wGP4+ecyN6CIiNicMyfDePPpdzm09wjOLs68OfpVOvfuYHasDKHzHbFVOtdLP1s8zj9/9gJj3vwi9arPvPnz8OzrA2jTraXqf3JHDlMst1qtXA+PIDYmlriYOOJi44iJjuXyxStcPHeJC2EXOXf6PKFHT3LiyEkS4hPSrMPdw52gSmUoVyWIClWCqFitPAWK5Fef0RtiomPYsmYba5dtYO3S9Vy9HJ56m6eXJ/Wa1aZJ64bUb1YHn5w+5gW1Y/pZs23OONEioBYAyy5twUrSPR4hIv/lIIcdDywmOoZ/fl/I9J9mEnbqHADuHm60696aXs/0oEgJTQYqIpLdJSUl8ddv/zD+ownERMfg55+LMRM/pGrtR8yOlmF0viO2Sud66Werx/mGYbB07gq+G/VT6kDP/IUDeWJgNzr2bIe3j5fJCcXWOEyx/EEkJiZy9uQ5juw/yr6QA+wN2c+BnQeJioxOc99cuX2pUK08FaoE3fhejpy5cpiQ2hxnToaxfvlG1i3fyPaNIamXkgPk9MtJoxb1aNKmEbUa1dClLBlAB4+2TQdQIumXDQ87bpGYmMiqhWuY9sMf7N+ZPK+HxWKhcesGPPncE1SqXkH7AhGRbGhfyH7GfzyBbRtCAKhSuzIfjH+H/IUCzQ2WwbSPE1ulc730s/Xj/LjYOGZNnsOv307n2tVrQPLAz8atG9CyczNqNayOm7ubySnFFmTLYvntJCUlcfLoKfbtPMDeHfvZF3KAg3sOk5iQmOa+RUoUpkK1clSoUo6K1cpRunwpXB3kEp3ExER2bd2bWiA/fij0ltsLFi1Ag+Z1adiyPtXqPIKLqy5byUg6eLRtOoASST8ddiQzDIPtG0OYNmEG65dvTF1eqlwJ2j3emlaPNScgr7+JCUVEJLMZhsHubXv57fvfWb14HZB8tfOLbz/D4wMec8g5tnS+I7ZK53rpZy/H+bHRsSycvZTff5rFiaP/P+eeh6cH1etVoU6TWtRpUosiJQrpd1Y2pWL5XcTHxXNo7xH2bt/H3pAD7N2xj1PHz6S5n7OLM0VKFKZk2eKUDCpOiaDilCxbgoJF8+Ps7GxC8vuXmJjIoT2H2b5xJ9s2hrBzy24ir0em3u7s7MwjtSrRoHldGjSvS9FSRfTLIhPpvbVtOoASST8ddqR19OBxpk+YweI5y1PbxDk7O1O7cQ2atm1Mo1b11dtcRMSBnDt9ntWL1/L37ws4sv8YAE5OTrTp1pJBQ/tRoHB+kxNmHp3viK3SuV762dtxvmEY7N2xnyVzlrNifjCXzl++5Xb/vLmpUrsyVWpVpmrtypQsV8Lma3ySMVQsf0DhV66xL2Q/e3ckF8/37jiQevnGf7l7uFGsVFEKFy9EwaIFKFg0PwUK56dg0QLkK5DXlFHZl85fZv/OA+wLOcC+nQfY9e+eNO1nfP18qfdoLRo0r0edJjXJ4Zt92s6YTRPe2DZN+iKSfrY48Y+tuB4ewbJ/VrJg1mL2bNuXutzJyYnKNSvSsEU9qterQpmKpTUhkdiFL0d+i4enO37+ufDzz0WxUkUpUbaYLnGWbOfa1evs2rqHHZt2smXNVg7tPZJ6m7uHG807PkqfF3pSvHQx80JmEZ3viK3SuV762fNxvmEYHNl/jI2rNrMxeAu7/t2TZq5Dn5w+PFKzIlVqVaZK7cqUe6SsjmkclIrl6WQYBhfCLnLs4HGOHjjO0Rvfjx86Tlxs/B0f5+zsTN4CeShQJD95AwPIE5iHPIEB5C2Qh4C8/uTMlRPfXDnw8fV5oBPi+Lh4Ll+8wqXzl7l0/jJhp89x4shJThw9ReiRk1y5eCXNY3L4+lClVmWq1atC9bpVKV2hpP5aJnIbiXEJ/P76DwD0/Ow5XNx1ACUimePEkZMsnx/M6kVrObD70C23eft4UblmRSpWq0Cp8iUoFVSCgkULOOTl+mK/rFYr9Yo0SzPKzNnFmVJBJajZsDp1GtfkkVqVcPfQvDeOyDAMLl+8wtVL4URcjyTyWiQR1yNIiE/AMAxSfjTc3N3w9PLAw9Pjxnd3PLw8k797euDm7oa7uxsuri42OyrZMAyuh0dw6fwlLp67zImjJwk9coLQwyc4fjjtOVjKH0GbtW9Cm64ts9WcWCK2Sud6crPYmDj27TxAyOZdhGzexa5/dxMdFXPLfVzdXClRphhlKpYmqFIZylYsTanyJfDy1oSh9k7F8kxitVo5cyKMYwePc+bkWc6eDOPsyTDOnDhL2Olzdy2k/5d3Dm98cnjj5u6Ki6srrq4uuLq5YnGyEBsdS1RkNDFRMcREx9xzvU5OThQrXZTyj5Sl3CNBVKpeQcVxkfukAygRMUPK5fpb1m4jZMsuIq5FprmPh6cHBYrkJ7BgXvIVzEfe/HnI6ZuDHL4+eOfwxtvHCycnJ5ycnXB2dk7d78fFxhEXG0dsTNz//zs2jriYOGJjYomJjiUmOobY6Fiib3xPXRYThzXRioEBNwpfyQUwA2dnJ9w93HH3cMfD0z313yn/9/DyxMvbE8+U7943ffdK/u7p5ZG63MPTQ38MsDPxcfH89v3vXL0cztVL4Vw8f4ljB49zPTzilvu5e7hRvV5VGrVqQMMW9cgTGGBSYnlYMdExHDsYypH9xziy/yihh08Qdvo858+ef6BznnuxWCzJhXMPN1zdXHFxccHJ2QkXl+TfaU43frc5OzvhnLos+d8uKf++cT+X/9x+8+OcnP7/96STc/LvnYT4BBISEkiITyQmKobIiEgir0cRFRlN5PVIwq9cIz7u7q+1SInCVK1Tmap1HqFu09pqryViY3SuJ3eTmJjI4X1HU4vnIZt3cfVy+G3vmyu3L4GFAslfKB8Bef3xzuGFt4833jm8cHVzw9nZCYuTJXk/45T8bxdXFzw83HH39MDDww13Tw+8vb3IncdPo9dNoGK5CZKSkrh84QpnT4YRdvocF89d4kLYxeTv5y5y+fwVrl+LICoi6qHW7+rmSkBef/zz5SZv/jwUK1WUoiULU7RUEYqVKqK/cok8JB1AiYjZrFYrR/cfY/umnRzac5gj+49x7FDoPYs0jsDT66ai+o0iu4eXBy6uLv9f6Lq5+OWU/L33sz0oVrqo2fGFG1dknr1IyJZdbF79L5vXbOXiuUu33KfcI2Vp1KoBjVrWp1S5EjY7kjg7SkpKIuz0eY7sO8qR/Uc5vP8oR/Yd49Tx03fsU+vk5ESu3L7kuOmPd+7ubmCxkLJp4+PiiYmOJTYmjtgbf4hL/n8scbFxWfgK0y+nX04C8vpTqFhBipcuSrHSRSheuihFSxXF20fnYCK2TOd68iAMwyDs9DkO7j7MwT03vnYfStP3PCPkzJUD/7z+5MnnT76C+QgsmC91gExgwXzkK5AnS6/Si42OJfzKtZu+wrl29TrXbl529RqR1yKJi4sn/sZXXFw88bHxvDnmVdo93jrL8j4MFcttWGJiIpHXIrkWHkFUZBSJ8YmpIxoSEhJIsibh6eWBl49X6smjt483OXx9dGIhkgl0ACUitigxMZEzoWdvjOS8wPkz57lw7hKR1yOJvB5JxPVIYqJisCYlkWRN/rJarUDyqN57jQD39EpujeDp6XHL/z28PHF2ccZiAQsWLJbkLyyQZE26MVI9/tYR6zeWxUbHEB0VQ0xUDNHRN77/5/8py9J7qDph9tdUq1slA95pyWiGYXDs4HHWLdvImqXr2bN93y3bO3/hQBq2qEeN+tV4pFYljcTNQlcvh3P0wDGO7j+W2mby2MHjaeY6SpE7T25KlytBqXIlKVG2WPKVLoUCyZc/T7rmaUpKSiIhPuH/T7JvnGjHx8WTaLViTbSm/k6zWpOwJlqxWq0kWa0kWm/cdmNZyu1JSdYby2487sY6UteXlJT8+BuPA3BzSx7N7urmgqeXJz45vPHO6Y23jzc+Ob3x9fMlIG9utRQSsWM615OMEHEtgrDT5zl3+jxhp8K4euUaURFRyV+R0amtyKzW5H1NkmGQZE3e16UeJ9/4Y3FkRBSJCYn39by5A/zIVzBvcvH8RjE9paieM1fOG/uw5E4VVmsS8XHxyc8ZF09CXDyREVFcD4/gengEEdciuB5+nevXIrh+Nfnf165eTy2Ep/cP2W+OeY2ufTqlax2ZTcVyEZH7pAMoEZGsZRgGcTFxaQvqN9rPRUdFk5hwa/ErKSnppn9bafNYSwIL5TP7pch9uHThMuuXb2LNknVsWbs1TQuPIiUKU7lGBUqULU6x0kUpXroogYXyqZ3gQ0iIT+DKpaucO32es6fCUltGnj0VxvFDJ7hy6eptH5fSn7VU+ZKUKleC0uVKUrJcCfzz5M7iVyAikrF0rie2xjAMrl29zuWLV7h8/jIXzl3i/JnznDtznnNnLtz49wViY2KzPJuLqwt+/rnw9cuJb25fcqV8+SV/971xVZmHpzuubq64u7vh5uGGm7s7fv6+Nt/x4uH/zC8iIiIikoksFgseXh54eHlAgJ/ZcSSTBeT1p1OvdnTq1Y7Y6Fi2rN3GhlWb2LllN0cPHOfksVOcPHbqlsc4OzuTO48fAfn8CcjrT06/nHh6etzS997d3S25b7WLS+p3i5Pltldi3unqzAddzp0u8rypt3/KFzeGLt2y7Lb/58b8AEbqBJnJtyXfnpiQmDr/QOyNeQeSv5Lbmly7eo2rl8K5evnqbec++K+CRQtQMqgEJYOKUyqoBCWCilO0ROF0jRQXERGR+2OxWFKL0CXLFr/tfVIK6imF8/NnL3DuzHnOn7lwo6h+nsjrUSQkJNwySt3Z2Rk3dzdc3V1xc3PFJ4c3OXxzkNMvJzl9fciZKyc5fHPgmysHOXLlSM3hmzsXuXL74uXt6dAdLTSyXETkPhmGgTU+eQfj7Obi0DsHERERW3Lt6nV2b9vLvpADhB4+QeiRE5w8djpb9OvPLM7OzuTNn4cCRQLJXyiQAkXyU6BIfoqVKkLxMsXw9PI0O6KISJbRuZ44uqSkJBITEm9Mjq0/fN+NiuUiIiIiImJ3rFYrly9c4dKFy1w+f5lLFy4TcS2S2OjY5NY90bFE3+gPmphoxZqYSGJCIomJiSQlpT0FutNp0R1Pl+60+C7rubm3f8q/LSmTXab8+8awdMuN+3DTff7/8cn3Sv0/4OzinHwlhqdH8pwDN31393DH1y8nfgF+5PbPhV+AHzl8fXBycrrreywiIiKS3ahYLiIiIiIiIiIiIiLZnoYSiIiIiIiIiIiIiEi2p2K5iIiIiIiIiIiIiGR7KpaLiIiIiIiIiIiISLanYrmIiIiIiIiIiIiIZHsqlouIiIiIiIiIiIhItqdiuYiIiIiIiIiIiIhkeyqWi4iIiIiIiIiIiEi2p2K5iIiIiIiIiIiIiGR7KpaLiIiIiIiIiIiISLanYrmIiIiIiIiIiIiIZHsqlouIiIiIiIiIiIhItqdiuYiIiIiIiIiIiIhkeyqWi4iIiIiIiIiIiEi2p2K5iIiIiIiIiIiIiGR7KpaLiIiIiIiIiIiISLanYrmIiIiIiIiIiIiIZHsqlouIiIiIiIiIiIhItqdiuYiIiIiIiIiIiIhkeyqWi4iIiIiIiIiIiEi255KRKzMMg/j4+IxcpYiIiIiIXXNzc8NisWT58+rYXERERETkVvc6Ns/QYnl8fDxjxozJyFWKiIiIiNi1t956C3d39yx/Xh2bi4iIiIjc6l7H5hbDMIyMerKMHr1y7tw5pkyZQr9+/QgMDMyw9cqD0XawDdoOtkHbwTZoO9gGbQfboO1gG+62HbLryHL9bNoPbSv7ou1lP7St7Iu2l/3QtrIvtra9snRkucViydBRM25ubqnfzRiNI8m0HWyDtoNt0HawDdoOtkHbwTZoO9gGW9wOGX1s/qBs8T2R29O2si/aXvZD28q+aHvZD20r+2Jv20sTfIqIiIiIiIiIiIhItmfTxXIfHx8aN26Mj4+P2VGyNW0H26DtYBu0HWyDtoNt0HawDdoOtkHbIS29J/ZD28q+aHvZD20r+6LtZT+0reyLvW2vDO1ZLiIiIiIiIiIiIiJij2x6ZLmIiIiIiIiIiIiISFZQsVxEREREREREREREsj0Vy0VEREREREREREQk21OxXERERERERERERESyPRXLRURERERERERERCTby/Ji+blz5xg4cCD58+fHw8ODMmXK8OGHHxIfH3/f6zh8+DCjRo2iUaNGFChQADc3NwoXLkyfPn04cODAbR/Tr18/LBbLbb+CgoIy6uXZlH///Ze2bdvi5+eHt7c3tWrVYvr06Q+0jqSkJL799lsqV66Mp6cnefLkoXv37hw+fDhTn9fRpPc9WbduHUOHDqV69er4+/vj4eFBUFAQb775JuHh4bd9TLFixe74Mz948OAMemX2Jb3bITg4+I7vqcViYdOmTZnyvI4mve9HkyZN7rodLBYLv/322y2P0efhVtOmTePZZ5+lRo0auLu7Y7FYmDJlygOvR/uI9MmI7aD9Q/plxHbQ/uH+bN++nccff5zixYvj6elJ0aJF6dSpE2vWrDE7mtwkNDT0nvtZZ2dns2PKbezcuZNevXpRsGBB3N3dKVCgAG3atGHVqlVmR5MbsmNdwpFs2rQJZ2dnLBYLY8aMMTuO3GTMmDG0bNmSwoUL4+npib+/PzVq1ODLL78kOjra7Hhyk6ioKKZNm0b37t0pU6YMnp6e5MqVi8aNG/P777+bHQ8Al6x8snPnzlG7dm1OnTpF586dKVOmDOvWrWPkyJFs3LiRBQsW4OR07/r9iBEjmDFjBhUrVqRTp07kzJmT3bt389tvv/Hnn3+yZMkSGjZseNvHvvzyy+TKleuWZQEBARnx8mxKcHAwrVq1ws3NjSeeeAJfX1/++usvevfuTWhoKG+//fZ9rWfw4MH8/PPPlC9fniFDhnD+/HlmzJjB0qVL2bBhA+XLl8+U53UkGfGedOvWjUuXLtGgQQP69OmDxWIhODiYsWPHMnv2bDZs2EDevHnTPM7X15dXXnklzfIaNWpkxEuzKxn5s9m4cWOaNGmSZnmhQoUy9XkdQUa8H/369bvt+5+QkMDo0aNxcnKiWbNmaW7X5+H/vfvuu5w4cYKAgADy58/PiRMnHmo92kekT0ZsB+0f0i+jPg+g/cPdzJ07l65du+Lu7k6XLl0oXLgwp06dYs6cOfzzzz9MnjyZfv36mR1TgFy5cjFy5Mjb3rZ161YWLFhAq1atsjiV3MvUqVMZMGAAvr6+tG/fnoIFC3Lp0iW2bt3Khg0baNq0qdkR5SbZpS7hSGJiYujXrx+enp5ERUWZHUf+48cffyQgIIAWLVqQN29eIiMjCQ4OZujQoUydOpUNGzbg5eVldkwB1q5dy1NPPYW/vz/NmjWja9euXLhwgb/++otevXqxYcMGxo8fb25IIwv16dPHAIzvv/8+dVlSUpLRt29fAzAmTZp0X+uZPHmyERISkmb577//bgBG+fLl09yW8hzHjx9/6Pz2IiEhwShZsqTh7u5ubN++PXX59evXjQoVKhguLi7GoUOH7rmelStXGoDRsGFDIzY2NnX58uXLDYvFYjRq1ChTnteRZNR7MmbMGOPs2bO3LEtKSjKee+45AzCef/75NI8pWrSoUbRo0XS/BkeQUdth1apVBmCMHDkyS5/XUWT2+/Hnn38agNGhQ4c0t+nzcKtly5YZoaGhhmEYxujRow3AmDx58gOtQ/uI9MuI7aD9Q/plxHbQ/uHeypUrZ1gsFmPHjh23LN+2bZthsViM4sWLmxNMHkj79u0NwJg9e7bZUeQmW7duNVxcXIy6desaV65cSXN7QkKCCankdrJTXcLRvPrqq0bOnDmNjz76yACM0aNHmx1JbhITE3Pb5U899ZQBGN9++20WJ5I7CQkJMf73v/8Z8fHxtyw/d+6cUbRoUQMwtmzZYlK6ZFnWhiUiIoIZM2ZQokSJWy7xtVgsqSMBf/755/taV79+/XjkkUfSLH/iiScoU6YM+/bt49KlSxmW3d6sXLmSo0eP0qtXL6pWrZq6PEeOHIwYMYLExEQmT558z/WkbI+PP/4Yd3f31OXNmjWjVatWrFmzhkOHDmX48zqSjHpP3nzzTfLnz3/LMovFwogRIwBYvXp1xgZ3MGb9bOozcavMfj8mTpwIwNNPP53urI6uefPmFC1aNF3r0D4i/TJiO2j/kH4ZsR0eVHb8PBw7dowCBQpQpUqVW5ZXq1aN/Pnzc+HCBXOCyX07e/YsixYtIm/evHTo0MHsOHKTd999F6vVytSpU/Hz80tzu4tLll5QLuJw1q9fz9dff83nn39+26vFxHweHh63Xd6tWzcAjhw5kpVx5C4eeeQRevXqhaur6y3L8+XLx7PPPguYfw6TZXvNjRs3EhcXR4sWLbBYLLfclj9/fipVqsTmzZuJjY294w/5/Uh5s+90QLBgwQIiIiJwd3encuXKNGnSxOF67gUHBwPQsmXLNLelLLufH7zg4GC8vb2pX79+mttatWrF4sWLWb16NWXKlMnQ53Ukmf2e3OvnPS4ujl9//ZUzZ87g5+dHvXr1bvuHJkeX0dvh8OHDfPPNN0RHR1O0aFFatGhx28sm9Zm4VWa+H6dPn2bp0qUEBgbSrl27295Hn4eMpX2EbdP+wRzaP9xZhQoVCAkJYdeuXVSuXDl1eUhICGFhYbRv397EdHI/pkyZgtVqpU+fPmlOcMU84eHhLF26lKpVq1KqVClWr17Nli1bcHFxoXbt2tSrV8/siHIb2aEu4Siio6NT20AOGjTooeb5EfMsWLAAgIoVK5qcRO7Hvc5hskqWPXvKZF+lS5e+7e2lS5dm586dHDt2LE2P0/u1ZcsW9u7dS82aNdP0/0rx4osv3vL/MmXK8Pvvv1OtWrWHek5bdLf32s/Pj4CAgLtOvgbJDffDwsKoWLHibXfaKeu+eT0Z8byOJrPfk0mTJgG3P9mG5HkC/tv/s3Xr1vz222/ZqideRm+H6dOn3zIBm6enJx988AGvv/56pj6vvcvM92Py5MkkJSXRr1+/O+5Y9XnIONpH2D7tH8yh/cOdffnll7Rv35569erRpUsXChUqxOnTp/nrr79o2LAhP/74o9kR5S4Mw0j9vaIruGzL9u3bSUpKonDhwnTs2JF58+bdcnuLFi2YNWsWvr6+JiWU28kOdQlH8dZbbxEWFsbSpUvNjiL3Ydy4cYSHhxMeHs769evZunUrLVu2pE+fPmZHk3tIuULKYrHQvHlzU7NkWRuWa9euAdxxJ50zZ85b7vcw6+/bty9OTk6MHTs2ze2NGzdm9uzZnDp1ipiYGPbv388rr7zC0aNHadmyJWfPnn2o57VF9/Ne3+t9fpjtlRHP62gy8z0JCQnhgw8+IG/evLzxxhtpbh8wYADBwcFcvHiR69evs2nTJtq0acPixYvp2LEjhmE81PPao4zaDnny5OGzzz5j//79REVFcebMGaZNm0bu3Ll544030pzo6zNxq8x6PwzDSG1XcKcTeH0eMpb2EbZN+4esp/3DvTVu3Jg1a9YQGBjItGnTGDNmDNOmTcPf35/+/funaScktmX16tUcPXqUBg0aEBQUZHYcuUlKC6P58+ezZcsW5s6dy7Vr19i/fz8dO3Zk2bJlPPPMMyanlBTZqS7hCFavXs23337LqFGjKF68uNlx5D6MGzeODz74gK+//pqtW7fy5JNPMnv2bF0RZQdGjBjB7t276d+/v+lXAjxwsTwgIACLxXLfXymXmWam2NhYHnvsMQ4cOMBHH31EkyZN0tynf//+PPbYYxQqVAgPDw+CgoL46quvePPNN7l8+TJfffVVpucUySjHjx+nffv2WK1W/vjjj9uOAnzvvfdo3LgxAQEB5MiRg9q1azN//nwaNGjAxo0bWbhwoQnJ7VuFChUYNmwYQUFBeHl5UaBAAXr37s3ixYtxc3Nj5MiRJCUlmR0z21m5ciXHjx+ncePGlCpV6rb30edBsgvtH8yRXfYP6TkPWLRoEU2aNKF27drs27eP6Oho9u/fT5MmTejfvz+vvfaaeS/MQWXkedsvv/wCaFR5ZnrY7ZXyu8VqtTJhwgQ6depEzpw5CQoKYubMmRQpUoRZs2Zx6tQpE1+dY0nPZ0t1iaz3sNsrKiqKAQMGULdu3TRXAkjmyIj9VmhoKIZhEBYWxvTp0wkODqZ27dqcPn0661+Qg8vI44yffvqJ0aNHU7VqVb7++uusexF38MBtWHr27ElERMR93z8wMBD4/5Ezdxolc/369Vvud7/i4uLo0qULK1euZPjw4bz99tsP9Pinn36aUaNGsX79+gd6nC27n/f6Xu/zw2yvjHheR5MZ78mJEydo2rQpFy9eZPbs2TRt2vS+H+vk5ET//v1Zt24d69evv2NvZ0eT2T+bFStWpHbt2qxdu5YjR46k9mjWZ+JWmfV+pEzsOXDgwAd6XHb9PGQE7SNsk/YPtsfR9g8Pex5w5coVevXqRenSpfntt99wckoerxMUFMSvv/7K4cOH+frrr3nhhRcoWbJkpmTPjh52e/1XeHg4s2fPJmfOnHTv3j2j4sl/pPc829nZOc3vbnd3d1q2bMnEiRPZtm0bhQsXzrjA2VhGfbZu5oh1CVvxsNvrnXfe4ezZsyxcuDB1vyWZKyM/W4GBgfTs2ZNSpUpRq1Ythg4dyowZMzIiptyQUdtr8uTJDB48mEqVKrFs2TJ8fHwyKuJDe+Bi+fjx4x/qiW7Xv/Rmhw8fxsnJiRIlStz3OmNjY+ncuTNLlizhjTfeYNSoUQ+cK2XEVXR09AM/1lbd/F5Xr179ltuuXr3KpUuX7jnRi7e3N/nz5+f48eNYrdY0PWlv12szI57X0WT0exIaGkrTpk05e/Yss2bNeqjJsBzxZ/5esuJn83bvqz4Tt8qM9+Pq1avMmTOHXLly0bVr1wfOlB0/DxlB+wjbo/2D7XKk/cPDngesX7+e8PBwGjdunKbgYLFYaNq0KZs2bWLHjh0qlmegh91e/zV9+nRiYmLo06cPXl5eGbJOSetht1fZsmUB8PLyum2bgZS5vGJiYh46m9wqoz5bN9M+OPM87PYKCQkhNjb2jq2nhg8fzvDhw3n55ZcZN25cOhJKisz4bNWsWRM/P78s6XqR3WTE9po0aRKDBg2ifPnyrFixAn9//wxIln5Z9uexOnXq4O7uzrJly9L0wgwLC2P37t3Url0bDw+P+1rfzYXyYcOG8emnnz5Urs2bNwNQrFixh3q8LWrcuDHAbSegSFmWcp97rScqKuq2f91esmRJmvVk1PM6kox8T0JDQ2nSpAlnzpxhxowZdOrU6aEyOeLP/L1k9s9mYmIi27dvx2KxUKRIkSx7XnuTGe/HtGnTiIuLo3fv3nh6ej5wpuz4ecgo2kfYDu0fbJf2D8ni4+MBuHjx4m1vT1nu7u6eZZnk/qW0YHnQK7gka5QsWZIiRYoQERFx2zYD+/btA/S73dZpH2x72rVrx9NPP53mq1GjRkByEfbpp5+mbt26JieVu4mMjOTatWu4uDzwWGHJZJMmTWLgwIEEBQWxcuVK8uTJY3ak/2dkoT59+hiA8f3336cuS0pKMvr27WsAxqRJk265f1RUlLF//37jxIkTtyyPiYkxWrZsaQDGa6+9ds/nDQsLM44cOZJm+enTp42goCADMP7444+HfFW2JyEhwShRooTh7u5u7NixI3X59evXjQoVKhguLi7GwYMHU5dfvHjR2L9/v3Hx4sVb1rNy5UoDMBo2bGjExcWlLl++fLlhsViMRo0apet5s4OM2hbHjx83ihYtari4uBizZ8++5/Pu3bvXuHr1aprla9euNTw8PAx3d/c0nytHllHbYcOGDUZSUlKadb/yyisGYLRu3Tpdz+voMmo73OyRRx4xAGP79u13vI8+D3c3evRoAzAmT55829u1j8gaD7sdtH/IWA+7HbR/uLvTp08bzs7Ohqenp7Fz585bbtuzZ4/h7e1tuLu73/X3vZhjx44dBmBUrlzZ7ChyF6NGjTIA46mnnjKsVmvq8uDgYMNisRjFihUzEhISTEwohpH96hKOavLkyQZgjB492uwockNoaKhx/PjxNMvj4+ONp59+2gCMp59+OuuDyR1NnDjRsFgsRrly5Yxz586ZHSeNLP3TypgxY1i1ahUvvPACy5cvp0yZMqxdu5b169fTqlUr+vbte8v9t2zZQtOmTWncuPEtl0wMHjyYpUuXEhgYSI4cOXj//ffTPFe/fv1S/yp74MABHn300dTZ23Pnzk1oaCjz588nKiqKvn37OlT/PRcXFyZOnEirVq1o2LAhPXv2JGfOnPz1118cP36cjz/+OLVnJsC3337LBx98wMiRI295L5s2bcrAgQOZOHEiVatWpV27dpw/f54ZM2aQM2dOfvjhh3Q9b3aQUduiSZMmnDhxgjp16rBr1y527dqV5rluvv/MmTMZO3YszZo1o1ixYri7u7Nnzx6WLl2Kk5MTEyZMuGWEm6PLqO3Qs2dPLBYL9erVo2DBgoSHh7NmzRoOHjxIkSJFmDBhQrqe19Fl1HZIsW3bNnbu3Em1atWoWrXqHZ9Xn4e0Jk6cyLp16wDYvXt36rKUfW3nzp3p3LkzoH1EZsqI7aD9Q/plxHbQ/uHuChYsyPDhw/n444+pWbMmnTt3plixYpw8eZI5c+YQFxfHZ599dtsJacVcGlVuH1577TXmz5/Pb7/9xr59+2jUqBFhYWHMnj0bd3d3Jk2apFGVNiC71SVEssqOHTvo2rUrDRs2pHTp0gQEBHD+/HmWL1/OqVOnKFu2LJ988onZMeWGlStXMmjQIAzDoFGjRmnOGwGqVKmSevxtiqyuzp89e9YYMGCAkS9fPsPNzc0oVaqU8cEHHxixsbFp7rtq1SoDMBo3bnzL8saNGxvAXb9WrVqVev+TJ08aAwcONCpXrmz4+fkZLi4uhr+/v9GiRQuH/svt5s2bjdatWxu+vr6Gp6enUaNGDWPatGlp7jdy5EgDMEaOHJnmNqvVanzzzTdGhQoVDHd3d8Pf39/o1q3bXUc73e/zZifp3Rb3+nn/70c5ODjY6N69u1GqVCkjR44chqurq1GoUCHjiSeeMDZv3pyZL9WmpXc7jBkzxmjSpIlRoEABw83NzfDy8jIqV65svPPOO8aVK1fS/bzZRUb8bjIMw3juuefSXK10O/o8pJVyRdedvm5+z7WPyDwZsR20f0i/jNgO2j/cn5kzZxrNmjUz/Pz8DGdnZyN37txGy5YtjXnz5pkdTW4jJibG8PPzM9zd3e/6cyy2ISoqyhgxYoRRqlQpw83NzcidO7fRpUsXIyQkxOxockN2rUs4Go0stz0nTpwwXn31VaN69eqGv7+/4ezsbPj6+hp16tQxPv30UyMyMtLsiHKTlM/Q3b769u1rakaLYfyngbiIiIiIiIiIiIiISDaTZRN8ioiIiIiIiIiIiIjYKhXLRURERERERERERCTbU7FcRERERERERERERLI9FctFREREREREREREJNtTsVxEREREREREREREsj0Vy0VEREREREREREQk21OxXERERERERERERESyPRXLRURERERERERERCTbU7FcRERERERERERERLI9FctFREREREREREREJNtTsVxEREREREREREREsj0Vy0VEREREREREREQk2/s/xwuXnqjIDSEAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 1472x552 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "az.plot_posterior(\n",
    "    two_level_hgf_idata,\n",
    "    var_names=[\"mu_temperature\", \"mu_volatility\"],\n",
    "    ref_val=[0.5, -4.0],\n",
    ");"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ef2c668a-2624-470e-9f16-9ecef703769d",
   "metadata": {},
   "source": [
    "The reference values on both posterior distributions indicate the mean of the distribution used for simulation."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3ebdbf9a-b76b-4007-952e-0416aff5fc92",
   "metadata": {},
   "source": [
    "## Model comparison"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4df4b830-431d-4946-abc7-9ace4b23a3cd",
   "metadata": {},
   "source": [
    "The posterior samples we get from [PyMC](https://www.pymc.io/welcome.html) are crucial to inform inference over parameter values, but they can also be helpful to compare different models that were fitted on the same observations. Here, we use leave-one-out cross-validation {cite:p}`Vehtari:2015`, which is the default method recommended by [Arviz](https://python.arviz.org/en/stable/). This function requires that the posterior samples also include pointwise estimates, it is therefore crucial to save this information during sampling, or alternativeæly to compute this manually from the samples a posteriori. We compute the expected log pointwise predictive density (ELPD) for one model, which indicates the quality of model fit (the higher the better). This quantity can be used to compare models side by side, provided that they are fitted to the same observed data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "36310588-728c-49c2-8bc9-09383d018ff2",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%capture --no-display\n",
    "loo_hgf = az.loo(two_level_hgf_idata)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "fa65cc15-ee38-45b0-9629-9c7271ea5f62",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Computed from 2000 posterior samples and 3200 observations log-likelihood matrix.\n",
       "\n",
       "         Estimate       SE\n",
       "elpd_loo -1684.95    25.65\n",
       "p_loo       18.68        -\n",
       "\n",
       "There has been a warning during the calculation. Please check the results.\n",
       "------\n",
       "\n",
       "Pareto k diagnostic values:\n",
       "                         Count   Pct.\n",
       "(-Inf, 0.5]   (good)     3186   99.6%\n",
       " (0.5, 0.7]   (ok)          1    0.0%\n",
       "   (0.7, 1]   (bad)         2    0.1%\n",
       "   (1, Inf)   (very bad)   11    0.3%"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loo_hgf"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ffe250ba-d679-4c9c-ab48-d9d4f8fd3eaa",
   "metadata": {},
   "source": [
    "# System configuration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "bb873616-fc3d-4e97-aa8c-1498dcb00952",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Last updated: Mon Jul 08 2024\n",
      "\n",
      "Python implementation: CPython\n",
      "Python version       : 3.12.3\n",
      "IPython version      : 8.23.0\n",
      "\n",
      "pyhgf : 0.1.2\n",
      "jax   : 0.4.30\n",
      "jaxlib: 0.4.30\n",
      "\n",
      "numpy     : 1.26.0\n",
      "pytensor  : 2.23.0\n",
      "jax       : 0.4.30\n",
      "matplotlib: 3.8.4\n",
      "sys       : 3.12.3 | packaged by conda-forge | (main, Apr 15 2024, 18:38:13) [GCC 12.3.0]\n",
      "pymc      : 5.16.1\n",
      "seaborn   : 0.13.2\n",
      "arviz     : 0.18.0\n",
      "\n",
      "Watermark: 2.4.3\n",
      "\n"
     ]
    }
   ],
   "source": [
    "%load_ext watermark\n",
    "%watermark -n -u -v -iv -w -p pyhgf,jax,jaxlib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2b9faf02-8164-48b1-8080-ee287bb93ebe",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "40d3a090f54c6569ab1632332b64b2c03c39dcf918b08424e98f38b5ae0af88f"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
