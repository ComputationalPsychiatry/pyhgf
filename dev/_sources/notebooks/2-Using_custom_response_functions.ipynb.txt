{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3aebaca2-f14e-4b6f-9d68-8ff7ea3c7b71",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "(custom_response_functions)=\n",
    "# Using custom response models"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1a9a9835-a027-4c14-9649-e7b51545b83d",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/ComputationalPsychiatry/pyhgf/blob/master/docs/source/notebooks/2-Using_custom_response_functions.ipynb)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6522fb9d-5799-4fe4-848e-a711bd3c2e15",
   "metadata": {
    "editable": true,
    "execution": {
     "iopub.execute_input": "2025-05-11T20:54:20.941244Z",
     "iopub.status.busy": "2025-05-11T20:54:20.940943Z",
     "iopub.status.idle": "2025-05-11T20:54:20.947701Z",
     "shell.execute_reply": "2025-05-11T20:54:20.946719Z"
    },
    "slideshow": {
     "slide_type": ""
    },
    "tags": [
     "hide-cell"
    ]
   },
   "outputs": [],
   "source": [
    "import sys\n",
    "from IPython.utils import io\n",
    "if 'google.colab' in sys.modules:\n",
    "\n",
    "  with io.capture_output() as captured:\n",
    "      ! pip install pyhgf watermark"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "96efb544-a8f7-44af-8345-ab6af53aaaf5",
   "metadata": {
    "editable": true,
    "execution": {
     "iopub.execute_input": "2025-05-11T20:54:20.949918Z",
     "iopub.status.busy": "2025-05-11T20:54:20.949741Z",
     "iopub.status.idle": "2025-05-11T20:54:22.925293Z",
     "shell.execute_reply": "2025-05-11T20:54:22.924523Z"
    },
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "An NVIDIA GPU may be present on this machine, but a CUDA-enabled jaxlib is not installed. Falling back to cpu.\n"
     ]
    }
   ],
   "source": [
    "import arviz as az\n",
    "import jax.numpy as jnp\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pymc as pm\n",
    "\n",
    "from pyhgf import load_data\n",
    "from pyhgf.distribution import HGFDistribution\n",
    "from pyhgf.model import HGF\n",
    "\n",
    "plt.rcParams[\"figure.constrained_layout.use\"] = True"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d55938bd-cc60-4c6f-8f69-959b340042d7",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "The probabilistic networks we have been creating so far with the continuous and the binary Hierarchical Gaussian Filter (HGF) are often referred to as {term}`Perceptual model`. This branch of the model acts as a [Bayesian filter](https://en.wikipedia.org/wiki/Recursive_Bayesian_estimation) as it tries to predict the next observation(s) given current and past observations (often noted $u$). In that sense, the HGF is sometimes described as a generalization of Bayesian filters (e.g. a one-level continuous HGF is equivalent to a Kalman filter). Complex probabilistic networks can handle more complex environments for example with nested volatility, with multiple inputs, or with time-varying inputs that dynamically change how beliefs propagate through the structure (see {ref}`probabilistic_networks` for a tutorial on probabilistic networks). \n",
    "\n",
    "But no matter how complex those networks are, they are only the *perceptual* side of the model. If we want our agent to be able to act according to the beliefs he/she is having about the environment and evaluate its performances from these actions, we need  what is traditionally called a {term}`Response model` (also sometimes referred to as *decision model* or *observation model*). In a nutshell, a {term}`Response model` describe how we think the agent decide to perform some action at time $t$, and how we can measure the \"goodness of fit\" of our perceptual model given the observed actions. It critically incorporates a {term}`Decision rule`, which is the function that, given the sufficient statistics of the network's beliefs sample an action from the possible actions at hand.\n",
    "\n",
    "Being able to write and modify such {term}`Response model` is critical for practical applications of the HGF as it allows users to adapt the models to their specific experimental designs. In this notebook, we will demonstrate how it is possible to write custom response models for a given probabilistic network.\n",
    "\n",
    "```{figure} ../images/response_models.png\n",
    "---\n",
    "name: response-models-fig\n",
    "---\n",
    "**The {term}`Perceptual model` and the {term}`Response model` of a Hierarchical Gaussian Filter (HGF)**. The left panel represents the {term}`Perceptual model`. The beliefs that the agent holds on state of the world are updated in the probabilistic network (blue circles) as the agent makes new observations (often noted $u$, e.g. the association between a stimulus and an outcome at time $t$). Using these beliefs, the {term}`Response model` (right panel) selects which decision/action $y$ to perform. Critically here, the {term}`Response model` only operates one-way (i.e. taking beliefs to generate action), but the actions are not modulating the way beliefs are updated (the model does not perform active inference - this point is, however, an active line of researches and new iterations of the model will try to *fusion* the two branch using active inference principles).\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fedbe1d8-3f35-47ce-9cf6-0b40054f8cc7",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "## Creating a new response function: the binary surprise\n",
    "To illustrate the creation of new response functions, we are going to use the same binary input vector from the decision task described in {cite:p}`Iglesias2021`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2fe26152-d746-4bda-872d-9a3e55ffc586",
   "metadata": {
    "editable": true,
    "execution": {
     "iopub.execute_input": "2025-05-11T20:54:22.927986Z",
     "iopub.status.busy": "2025-05-11T20:54:22.927628Z",
     "iopub.status.idle": "2025-05-11T20:54:22.934914Z",
     "shell.execute_reply": "2025-05-11T20:54:22.933922Z"
    },
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "u, _ = load_data(\"binary\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8d0e3852-b46e-48a9-8b7c-349382785cad",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "For the sake of example here, we will consider that the participant underwent a *one-armed bandit task*, which consisted of the presentations of two stimuli ($S_0$ and $S_1$) that could be associated with two types of outcomes ($O_{+}$ and $O_{-}$). On each trial, the participant was presented with the two stimuli, chose one of them and get an outcome. The underlying contingencies of stimuli associated with positive outcomes are changing over time, in a way that can be more or less volatile. The {term}`Perceptual model` tries to track these contingencies by observing the previous associations. We have already been using this {term}`Perceptual model` model before in the tutorial on the binary HGF ({ref}`binary_hgf`). Here the input data $u$ is the observed association between e.g. $S_0$ and $O_{+}$. In order to incorporate a {term}`Response model` on top of that, we need first to define:\n",
    "1. a range of possible actions $y$. In this case, the participant has only two alternatives so $y$ can be either `0` or `1`.\n",
    "2. a {term}`Decision rule` stating how the agent selects between the two actions given the beliefs of the probabilistic network at time $t$. \n",
    "In this situation, it is trivial to write such a decision function and generate actions as new inputs are coming in, for simulation purposes for example. We start by setting a {term}`Perceptual model` (i.e. a network of probabilistic nodes updated by observations). Here this is a standard two-level binary HGF, and the inputs are the binary observations (the association between one of the stimuli and the positive reward)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f543569f-234c-42a0-b23e-18b6379413ee",
   "metadata": {
    "editable": true,
    "execution": {
     "iopub.execute_input": "2025-05-11T20:54:22.937240Z",
     "iopub.status.busy": "2025-05-11T20:54:22.937024Z",
     "iopub.status.idle": "2025-05-11T20:54:23.128333Z",
     "shell.execute_reply": "2025-05-11T20:54:23.127266Z"
    },
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "agent = HGF(\n",
    "    n_levels=2,\n",
    "    model_type=\"binary\",\n",
    "    initial_mean={\"1\": .0, \"2\": .5},\n",
    "    initial_precision={\"1\": .0, \"2\": 1e4},\n",
    "    tonic_volatility={\"2\": -4.0},\n",
    ").input_data(input_data=u)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4a8f9ff3-e127-4bd2-b4f2-4c986129bc61",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "This perceptual model has observed the input sequence, meaning that we now have beliefs trajectories for all nodes in the network. The beliefs are stored in the variable `node_trajectories` in the model class, but can also be exported to Pandas using the `to_pandas` method like:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a579cfa3-d00c-4cf3-b1e7-278d732aee37",
   "metadata": {
    "editable": true,
    "execution": {
     "iopub.execute_input": "2025-05-11T20:54:23.130964Z",
     "iopub.status.busy": "2025-05-11T20:54:23.130737Z",
     "iopub.status.idle": "2025-05-11T20:54:23.342136Z",
     "shell.execute_reply": "2025-05-11T20:54:23.341029Z"
    },
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>time_steps</th>\n",
       "      <th>time</th>\n",
       "      <th>x_0_expected_mean</th>\n",
       "      <th>x_0_expected_precision</th>\n",
       "      <th>x_0_mean</th>\n",
       "      <th>x_0_observed</th>\n",
       "      <th>x_0_precision</th>\n",
       "      <th>x_1_expected_mean</th>\n",
       "      <th>x_1_expected_precision</th>\n",
       "      <th>x_1_mean</th>\n",
       "      <th>x_1_observed</th>\n",
       "      <th>x_1_precision</th>\n",
       "      <th>x_0_surprise</th>\n",
       "      <th>x_1_surprise</th>\n",
       "      <th>total_surprise</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.622459</td>\n",
       "      <td>0.235004</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.235004</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>54.301674</td>\n",
       "      <td>0.506923</td>\n",
       "      <td>1</td>\n",
       "      <td>54.536678</td>\n",
       "      <td>0.474077</td>\n",
       "      <td>-1.077038</td>\n",
       "      <td>-0.602961</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.624085</td>\n",
       "      <td>0.234603</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.234603</td>\n",
       "      <td>0.506923</td>\n",
       "      <td>27.283697</td>\n",
       "      <td>0.520583</td>\n",
       "      <td>1</td>\n",
       "      <td>27.518301</td>\n",
       "      <td>0.471469</td>\n",
       "      <td>-0.731660</td>\n",
       "      <td>-0.260191</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.627284</td>\n",
       "      <td>0.233799</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.233799</td>\n",
       "      <td>0.520583</td>\n",
       "      <td>18.296556</td>\n",
       "      <td>0.540697</td>\n",
       "      <td>1</td>\n",
       "      <td>18.530355</td>\n",
       "      <td>0.466356</td>\n",
       "      <td>-0.530717</td>\n",
       "      <td>-0.064361</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.631975</td>\n",
       "      <td>0.232583</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.232583</td>\n",
       "      <td>0.540697</td>\n",
       "      <td>13.834867</td>\n",
       "      <td>0.566859</td>\n",
       "      <td>1</td>\n",
       "      <td>14.067450</td>\n",
       "      <td>0.458906</td>\n",
       "      <td>-0.389923</td>\n",
       "      <td>0.068983</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.638038</td>\n",
       "      <td>0.230946</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.230946</td>\n",
       "      <td>0.566859</td>\n",
       "      <td>11.185465</td>\n",
       "      <td>0.510971</td>\n",
       "      <td>1</td>\n",
       "      <td>11.416410</td>\n",
       "      <td>1.016216</td>\n",
       "      <td>-0.270900</td>\n",
       "      <td>0.745316</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   time_steps  time  x_0_expected_mean  x_0_expected_precision  x_0_mean  \\\n",
       "0         1.0   1.0           0.622459                0.235004       1.0   \n",
       "1         1.0   2.0           0.624085                0.234603       1.0   \n",
       "2         1.0   3.0           0.627284                0.233799       1.0   \n",
       "3         1.0   4.0           0.631975                0.232583       1.0   \n",
       "4         1.0   5.0           0.638038                0.230946       0.0   \n",
       "\n",
       "   x_0_observed  x_0_precision  x_1_expected_mean  x_1_expected_precision  \\\n",
       "0             1       0.235004           0.500000               54.301674   \n",
       "1             1       0.234603           0.506923               27.283697   \n",
       "2             1       0.233799           0.520583               18.296556   \n",
       "3             1       0.232583           0.540697               13.834867   \n",
       "4             1       0.230946           0.566859               11.185465   \n",
       "\n",
       "   x_1_mean  x_1_observed  x_1_precision  x_0_surprise  x_1_surprise  \\\n",
       "0  0.506923             1      54.536678      0.474077     -1.077038   \n",
       "1  0.520583             1      27.518301      0.471469     -0.731660   \n",
       "2  0.540697             1      18.530355      0.466356     -0.530717   \n",
       "3  0.566859             1      14.067450      0.458906     -0.389923   \n",
       "4  0.510971             1      11.416410      1.016216     -0.270900   \n",
       "\n",
       "   total_surprise  \n",
       "0       -0.602961  \n",
       "1       -0.260191  \n",
       "2       -0.064361  \n",
       "3        0.068983  \n",
       "4        0.745316  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "agent.to_pandas().head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7f4cc804-fb04-44d5-bfbf-b62b4e2c2ceb",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "### Creating the decision rule"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6530129d-af70-4e3d-98e6-8e0ec06a410e",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "The next step is to use these beliefs to generate the corresponding decisions at each time point. We can work on the simplest {term}`Decision rule`, which is probably to use the expected value of the first level a time $t$ to sample from a [binomial distribution](https://en.wikipedia.org/wiki/Binomial_distribution) and generate a binary decision. Intuitively, this just means that the agent is more likely to select a given stimulus when the beliefs that is is associated with a positive outcome are close to `1.0`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "2558d4fe-448b-4d9c-8944-93087f01feda",
   "metadata": {
    "editable": true,
    "execution": {
     "iopub.execute_input": "2025-05-11T20:54:23.344490Z",
     "iopub.status.busy": "2025-05-11T20:54:23.344270Z",
     "iopub.status.idle": "2025-05-11T20:54:23.348875Z",
     "shell.execute_reply": "2025-05-11T20:54:23.348108Z"
    },
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# a simple decision rule using the first level of the HGF\n",
    "np.random.seed(1)\n",
    "responses = np.random.binomial(p=agent.node_trajectories[0][\"expected_mean\"], n=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "214a4f52-ff3f-4d7c-8c43-f0fd9b9d6782",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "This gives us a binary vector of responses $y$ that can be related to observations and underlying beliefs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d4391036-ddb1-42a0-ba66-6e9db3054656",
   "metadata": {
    "editable": true,
    "execution": {
     "iopub.execute_input": "2025-05-11T20:54:23.351419Z",
     "iopub.status.busy": "2025-05-11T20:54:23.351177Z",
     "iopub.status.idle": "2025-05-11T20:54:23.547908Z",
     "shell.execute_reply": "2025-05-11T20:54:23.546944Z"
    },
    "slideshow": {
     "slide_type": ""
    },
    "tags": [
     "hide-input"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'Trials')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12, 3))\n",
    "jitter = responses * .1 + (1-responses) * -.1\n",
    "plt.scatter(np.arange(len(u)), u, label=\"Observations\", color=\"#4c72b0\", edgecolor=\"k\", alpha=.2)\n",
    "plt.scatter(np.arange(len(responses)), responses + jitter, label=\"Responses\", color=\"#c44e52\", alpha=.2, edgecolor=\"k\")\n",
    "plt.plot(agent.node_trajectories[0][\"expected_mean\"], label=\"Beliefs\", linestyle=\"--\")\n",
    "plt.legend()\n",
    "plt.xlabel(\"Trials\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "558452b8-3d7c-484e-a59a-933f0fcf52f5",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "We now have the two ingredients required to create a response model:\n",
    "- the vector `observations` ($u$) that encode the current association between the stimuli and the outcomes.\n",
    "- the vector `responses` ($y$) that encode the inferred association by the participant, using the expected value at time $t$ at the first level.\n",
    "\n",
    "```{note}\n",
    "We started by simulation the responses from an agent for the sake of demonstration and parameter recovery, but in the context of an experiment, the user already has access to the vectors $y$ and $u$ and could start from her.\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6055eef2-8e7b-4a13-991e-394895f66391",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "### Creating a new response function\n",
    "\n",
    "Let's now consider that the two vectors of observations $u$ and responses $y$ were obtained from a real participant undergoing a real experiment. In this situation, we assume that this participant internally used a {term}`Perceptual model` and a {term}`Decision rule` that might resemble what we defined previously, and we want to infer what are the most likely values for critical parameters in the model (e.g. the evolution rate $\\omega_2$). To do so, we are going to use our dataset (both $u$ and $y$), and try many models. We are going to fix the values of all HGF parameters to reasonable estimates (here, using the exact same values as in the simulation), except for $\\omega_2$. For this last parameter, we will assume a prior set at $\\mathcal{N}(-2.0, 2.0)$. The idea is that we want to sample many $\\omega_2$ values from this distribution and see if the model is performing better with some values.\n",
    "\n",
    "But here, we need a clear definition of what this means *to perform better* for a given model. And this is exactly what a {term}`Response model` does, it is a way for us to evaluate how likely the behaviours $y$ for a given {term}`Perceptual model`, and assuming that the participants use this specific {term}`Decision rule`. In [pyhgf](https://github.com/ComputationalPsychiatry/pyhgf), this step is performed by creating the corresponding {term}`Response function`, which is the Python function that will return the surprise $S$ of getting these behaviours from the participant under this decision rule.\n",
    "\n",
    "````{hint} What is a *response function*?\n",
    "Most of the work around HGFs consists in creating and adapting {term}`Response model` to work with a given experimental design. There is no limit in terms of what can be used as a {term}`Response model`, provided that the {term}`Perceptual model` and the {term}`Decision rule` are clearly defined.\n",
    "\n",
    "In [pyhgf](https://github.com/ComputationalPsychiatry/pyhgf), the {term}`Perceptual model` is the probabilistic network created with the main {py:class}`pyhgf.model.HGF` and {py:class}`pyhgf.distribution.HGFDistribution` classes. The {term}`Response model` is something that is implicitly defined when we create the {term}`Response function`, a Python function that computes the negative of the log-likelihood of the actions given the perceptual model. This {term}`Response function` can be passed as an argument to the main classes using the keywords arguments `response_function`, `response_function_inputs` and `response_function_parameters`. The `response_function` can be any callable that returns the surprise $S$ of observing action $y$ given this model, and the {term}`Decision rule`. The `response_function_inputs` are the additional data to the response function (optional) while `response_function_parameters` are the additional parameters (optional). The `response_function_inputs` is where the actions $y$ should be provided.\n",
    "\n",
    "```{important}\n",
    "A *response function* should not return the actions given perceptual inputs $y | u$ (this is what the {term}`Decision rule` does), but the [surprise](https://en.wikipedia.org/wiki/Information_content) $S$ associated with the observation of actions given the perceptual inputs $S(y | u)$, which is defined by:\n",
    "\n",
    "$$\n",
    "\\begin{align}\n",
    "S(y | u) = -\\log[Pr(y | u)]\n",
    "\\end{align}\n",
    "$$\n",
    "```\n",
    "\n",
    "If you are already familiar with using HGFs in the Julia equivalent of [pyhgf](https://github.com/ComputationalPsychiatry/pyhgf), you probably noted that the toolbox is split into a **perceptual** package [HierarchicalGaussianFiltering.jl](https://github.com/ComputationalPsychiatry/HierarchicalGaussianFiltering.jl) and a **response** package [ActionModels.jl](https://github.com/ComputationalPsychiatry/ActionModels.jl). This was made to make the difference between the two parts of the HGF clear and be explicit that you can use a perceptual model without any action model. In [pyhgf](https://github.com/ComputationalPsychiatry/pyhgf) however, everything happens in the same package, the response function is merely an optional, additional argument that can be passed to describe how surprise is computed.\n",
    "````"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "22f83493-de32-4b95-b79d-e93b116712e4",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Therefore, we want a {term}`Response function` that returns the surprise for observing the response $y$, which is:\n",
    "\n",
    "$$\n",
    "\\begin{align}\n",
    "surprise | y & = \\sum_{t=1}^{t} - \\log(p(y^t | \\hat{\\mu}_1)) \\\\\n",
    "& = \\sum_{t=1}^{t} - \\log(\\hat{\\mu}_1^y(1 - \\hat{\\mu}_1)^{1-y}) \\\\\n",
    "\\end{align}\n",
    "$$\n",
    "We can write such a response function in Python as:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "9ffe8ee2-1b36-400b-8f71-09e9f097ba2a",
   "metadata": {
    "editable": true,
    "execution": {
     "iopub.execute_input": "2025-05-11T20:54:23.550584Z",
     "iopub.status.busy": "2025-05-11T20:54:23.550335Z",
     "iopub.status.idle": "2025-05-11T20:54:23.555188Z",
     "shell.execute_reply": "2025-05-11T20:54:23.554429Z"
    },
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def response_function(hgf, response_function_inputs, response_function_parameters=None):\n",
    "    \"\"\"A simple response function returning the binary surprise.\"\"\"\n",
    "\n",
    "    # response_function_parameters can be used to parametrize the response function (e.g. inverse temperature)\n",
    "    # ...<\n",
    "\n",
    "    # the expected values at the first level of the HGF\n",
    "    beliefs = hgf.node_trajectories[0][\"expected_mean\"]\n",
    "\n",
    "    # get the decision from the inputs to the response function\n",
    "    return jnp.sum(jnp.where(response_function_inputs, -jnp.log(beliefs), -jnp.log(1.0 - beliefs)))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a9be33b8-8fcc-4acb-b151-7007f516044d",
   "metadata": {},
   "source": [
    "This function takes the expected probability from the binary node and uses it to predict the participant's decision. The surprise is computed using the binary surprise (see {py:func}`pyhgf.update.binary.binary_surprise`). This corresponds to the standard binary softmax response function that is also accessible from the {py:func}`pyhgf.response.binary_softmax` function."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a564169-3fe2-4f7f-8fbe-7ac7b9bf8a9b",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "```{note}\n",
    "Note here that our {term}`Response function` has a structure that is the standard way to write response functions in [pyhgf](https://github.com/ComputationalPsychiatry/pyhgf), that is with two input arguments:\n",
    "- the HGF model on which the response function applies (i.e. the {term}`Perceptual model`)\n",
    "- the additional parameters provided to the response function. This can include additional parameters that can be part of the equation of the model, or the input data used by this model. We then provide the `response` vector ($y$) here.\n",
    "\n",
    "Note that the operation inside the function should be compatible with [JAX's core transformations](https://github.com/google/jax#transformations).\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "8abe91c5-7748-4445-826c-e52dff35094c",
   "metadata": {
    "editable": true,
    "execution": {
     "iopub.execute_input": "2025-05-11T20:54:23.558465Z",
     "iopub.status.busy": "2025-05-11T20:54:23.557851Z",
     "iopub.status.idle": "2025-05-11T20:54:23.594895Z",
     "shell.execute_reply": "2025-05-11T20:54:23.594002Z"
    },
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Array(205.87854, dtype=float32)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# return the overall surprise\n",
    "response_function(hgf=agent, response_function_inputs=responses)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "369ac58b-1a9a-4799-8d2d-a928f1154739",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "We now have a response function that returns the surprise associated with the observation of the agent's action. Conveniently, this is by definition the negative of the log-likelihood of our model, which means that we can easily interface this with other Python packages used for optimisation and Bayesian inference like [PyMC](https://www.pymc.io/projects/docs/en/stable/learn.html) or [BlackJAX](https://blackjax-devs.github.io/blackjax/). We use the surprise as a default output, however, as this metric is more commonly used in computational psychiatry and is more easily connected to psychological functioning."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d76e61b-ea8b-452d-a7c9-b2f50fd33f2d",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "## Recovering HGF parameters from the observed behaviors"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e1b18b6-dad1-4d95-8835-e994c53259c1",
   "metadata": {},
   "source": [
    "Now that we have created our {term}`Response function`, and that we made sure it complies with the standard ways of writing responses functions (see above), we can use it to perform inference over the most likely values of some parameters. We know that the agent used to simulate behaviour had an *evolution rate* set at `-4.0`. In the code below, we create a new HGF distribution using the same values, but setting the $\\omega_2$ parameter free so we can estimate the most likely value, given the observed behaviours."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "edb96ba7-6824-4d60-9dcf-8511066f2853",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T20:54:23.597305Z",
     "iopub.status.busy": "2025-05-11T20:54:23.597105Z",
     "iopub.status.idle": "2025-05-11T20:54:23.601745Z",
     "shell.execute_reply": "2025-05-11T20:54:23.601007Z"
    }
   },
   "outputs": [],
   "source": [
    "hgf_logp_op = HGFDistribution(\n",
    "    n_levels=2,\n",
    "    model_type=\"binary\",\n",
    "    input_data=u[jnp.newaxis, :],\n",
    "    response_function=response_function,\n",
    "    response_function_inputs=responses[jnp.newaxis, :]\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d03b46e-bf4d-4934-964f-eb683fcc1f4a",
   "metadata": {},
   "source": [
    "```{note}\n",
    "The response function that we created above is passed as an argument directly to the HGF distribution, together with the additional parameters. The additional parameters should be a list of tuples that has the same length as the number of models created.\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c27b15f5-0b79-448f-8b27-024e417fb462",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T20:54:23.603663Z",
     "iopub.status.busy": "2025-05-11T20:54:23.603478Z",
     "iopub.status.idle": "2025-05-11T20:54:23.614490Z",
     "shell.execute_reply": "2025-05-11T20:54:23.613634Z"
    }
   },
   "outputs": [],
   "source": [
    "with pm.Model() as sigmoid_hgf:\n",
    "\n",
    "    # prior over the evolution rate at the second level\n",
    "    tonic_volatility_2 = pm.Normal(\"tonic_volatility_2\", -2.0, 2.0)\n",
    "\n",
    "    # the main HGF distribution\n",
    "    pm.Potential(\"hgf_loglike\", hgf_logp_op(tonic_volatility_2=tonic_volatility_2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "e80e247a-7450-42f3-b4e7-352f965f63f4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T20:54:23.616825Z",
     "iopub.status.busy": "2025-05-11T20:54:23.616627Z",
     "iopub.status.idle": "2025-05-11T20:54:28.314401Z",
     "shell.execute_reply": "2025-05-11T20:54:28.313422Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Initializing NUTS using jitter+adapt_diag...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Sequential sampling (2 chains in 1 job)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "NUTS: [tonic_volatility_2]\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "88f0312ebce741a7ac4b43c2b174c2b1",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Output()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n"
      ],
      "text/plain": []
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Sampling 2 chains for 1_000 tune and 1_000 draw iterations (2_000 + 2_000 draws total) took 3 seconds.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "We recommend running at least 4 chains for robust computation of convergence diagnostics\n"
     ]
    }
   ],
   "source": [
    "with sigmoid_hgf:\n",
    "    sigmoid_hgf_idata = pm.sample(chains=2, cores=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "4fe53229-92ef-473e-b3c1-4f9c147c3a32",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T20:54:28.372791Z",
     "iopub.status.busy": "2025-05-11T20:54:28.372632Z",
     "iopub.status.idle": "2025-05-11T20:54:28.573832Z",
     "shell.execute_reply": "2025-05-11T20:54:28.573050Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>sd</th>\n",
       "      <th>hdi_3%</th>\n",
       "      <th>hdi_97%</th>\n",
       "      <th>mcse_mean</th>\n",
       "      <th>mcse_sd</th>\n",
       "      <th>ess_bulk</th>\n",
       "      <th>ess_tail</th>\n",
       "      <th>r_hat</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>tonic_volatility_2</th>\n",
       "      <td>-3.954</td>\n",
       "      <td>0.506</td>\n",
       "      <td>-4.85</td>\n",
       "      <td>-2.997</td>\n",
       "      <td>0.018</td>\n",
       "      <td>0.018</td>\n",
       "      <td>818.0</td>\n",
       "      <td>1018.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     mean     sd  hdi_3%  hdi_97%  mcse_mean  mcse_sd  \\\n",
       "tonic_volatility_2 -3.954  0.506   -4.85   -2.997      0.018    0.018   \n",
       "\n",
       "                    ess_bulk  ess_tail  r_hat  \n",
       "tonic_volatility_2     818.0    1018.0    1.0  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABLsAAADTCAYAAABp7hHfAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjEsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvc2/+5QAAAAlwSFlzAAAPYQAAD2EBqD+naQABAABJREFUeJzsvXeYJFd97v9W6uqcpifHndnZHJUllJAEAhHkwCUKg8kXE2yMDTbG4Odem3t/l2SbdLlkTHAgSAJJSCis0irsauNsmJxD59yV6/fHqarpnrSzu6Od1ep8nkePdjqerqqurvOe9/t+GdM0TVAoFAqFQqFQKBQKhUKhUCiXAOx6D4BCoVAoFAqFQqFQKBQKhUJZK6jYRaFQKBQKhUKhUCgUCoVCuWSgYheFQqFQKBQKhUKhUCgUCuWSgYpdFAqFQqFQKBQKhUKhUCiUSwYqdlEoFAqFQqFQKBQKhUKhUC4ZqNhFoVAoFAqFQqFQKBQKhUK5ZKBiF4VCoVAoFAqFQqFQKBQK5ZKBil0UCoVCoVAoFAqFQqFQKJRLBip2USgUCoVCoVAoFAqFQqFQLhmo2EWhXIT8+te/xle/+tUX9T0+//nPo6ur60V9j/PhscceA8MwGB0dPavnZbNZfP7zn8fhw4cX3dfV1YXPf/7zzt8Lt8Ho6CgYhsFjjz3m3PbVr34Vv/71r89qDKvlwIED+MAHPoAtW7bA6/Wis7MT73znO8/6M1MoFAqFQlkf6DUbvWajUCgXJ1TsolAuQi7EhdP73vc+/OpXv3pR32M9yGaz+Id/+IclL5x+9atf4X3ve9+yz21ubsb+/ftx2WWXObe9mBdOP//5z9HX14ePfexjuP/++/GFL3wBBw4cwJVXXompqakX5T0pFAqFQqGsHfSa7dyh12wUCuXFhF/vAVAolPWhra0NbW1t6z2MC8revXtXvF8URVxzzTUXaDTApz71KdTX19fc9opXvAIbNmzAd7/7Xfz93//9BRsLhUKhUCiUixN6zbYYes1GoVDOBHV2USgXGe9+97vxwx/+EGNjY2AYBgzD4OabbwYAPPfcc7jtttvg9/vh9/tx22234bnnnlv0/K6uLhw4cADXXXcdvF4vtm7div/8z/+sedxSlvhSqYRPfepT6O7uhiiKaGlpwVve8hbkcrkzjvvpp58GwzC47777Ft339re/HRs3bnT+zufz+MhHPoKWlhaIoojNmzfjK1/5CkzTXPE9vve97+HGG29EfX09AoEALrvsMvzoRz9y7h8dHcWGDRsAAH/6p3/qbD/b4r7QEr+QhZb4rq4ujI2N4Yc//KHzWp///OfxpS99CaIoIpFI1Dxf0zS0tLTgQx/60Iqfw2bhRRMAdHZ2IhaL0VVCCoVCoVAucug12/LQazYKhbLeULGLQrnI+OxnP4s77rgDTU1N2L9/P/bv349vfOMbOHr0KG666Sbkcjn84Ac/wA9+8APkcjncdNNNOHr0aM1rZLNZ3HXXXXj3u9+Nu+++G3v37sXb3vY2nD59etn3VRQFr3rVq/D1r38d733ve/Hb3/4W//zP/wy3241isXjGcV933XXo6enBv/3bv9XcXiwWcffdd+Md73gHAMAwDLzuda/DD37wA/zVX/0V7r33Xtx+++34xCc+gc985jMrvsfw8DDe/va346c//Sl++ctf4o477sB73vMefOtb3wJALO2//OUvAQB/93d/52y/aov72fCrX/0KTU1NuOOOO5zXet/73oc//dM/Bcuy+MEPflDz+HvuuQczMzP44Ac/eE7vBwB9fX1IJBLYunXrOb8GhUKhUCiUFx96zbY89JqNQqGsOyaFQrnoeNe73mV2dnbW3PbHf/zHZiQSMXO5nHNbLpczI5GI+aY3vanmuQDMxx9/3LlNkiQzGo2a//iP/+jc9rnPfa7mPb773e+aAMzf/va35zzuz33uc6bX6zULhYJz2w9/+EMTgNnf32+apmnee++9JgDzxz/+cc1z3/ve95qiKJqpVMo0TdN89NFHTQDmyMjIku+l67qpqqr53ve+19y1a5dz+8jIiAnA/P73v7/oOZ2dnebnPve5mvFWbwP7uY8++mjNc971rncteq0/+ZM/MXt7e2tue/WrX21eeeWVS453Naiqal5//fVmY2Ojmc1mz/l1KBQKhUKhXBjoNRu9ZqPXbBTKxQl1dlEoLxEef/xxvPGNb0QwGHRuCwaDeOMb34jHH3+85rHBYBA33HCD87coiti0aRPGx8eXff0HH3wQra2tuOOOO855jHfddRfK5bKzUgcAP/nJT3D11Vejt7fX+Rw8z+Otb33roufKsoxnn3122dcfGBjA2972NrS2tkIQBAiCgO9+97srrn6+WHz4wx/GwMAAHn30UQDAyMgIHnroIXzgAx8459f8yEc+gmeffRY/+clPEAqF1mqoFAqFQqFQLiD0mo1es1EolPWHil0UykuEdDqN5ubmRbc3NTUhnU7X3BaJRBY9ThRFSJK07OunUqnzDj/duHEjrr32WscWPzs7i4cffhjvfOc7ncek02nEYjHwfG1/jKamJuf+pSgWi3jVq16F4eFhfOlLX8ITTzyB559/Hu95z3sgy/J5jftcuPrqq7F37158+9vfBgD8v//3/xAIBPC2t73tnF7vM5/5DL797W/jhz/8IW699da1HCqFQqFQKJQLCL1mo9dsFApl/aHdGCmUlwjRaBQzMzOLbp+dnUU0Gj3v14/FYjh16tR5v8473/lOfOQjH8HMzAx+/vOfg2VZvOUtb3Huj0ajSCaT0DSt5uJpdnbWuX8p9u/fj7GxMTzxxBNob293blcU5bzHfK58+MMfdj7r97//fbzjHe+Az+c769f5X//rf+Gf/umf8I1vfOOcL7woFAqFQqFcHNBrNnrNRqFQ1h/q7KJQLkKWWtG76aabcO+996JQKDi3FQoF3HvvvbjxxhvP+z1f/epXY3JyEvfff/95vc5b3vIW8DyPn/70p/jJT36C17zmNYjFYs79N910EzRNw3/8x3/UPO8nP/kJRFHE1VdfveTrlstlAIAgCM5tqVQK99xzT83jRFEEgBVXRM+GlVZX3/72t8PtduOtb30rZmdnzynk9Otf/zr+5m/+Bl/4whfw3//7fz/f4VIoFAqFQrmA0Gu2xdBrNgqFcjFAxS4K5SJk69atmJubw3e/+108//zzOH36ND772c+iXC7jtttuwy9+8Qv84he/wG233YZyuYzPfvaz5/2ed911F6699lq8+c1vxhe+8AU8/PDD+OUvf4n3vve9Z9VSORqN4o477sBXvvIVHDx4EHfddVfN/a997Wtx/fXX44Mf/CC++tWv4sEHH8Rf/MVf4Dvf+Q7+8i//ctlVwuuuuw7BYBB33XUXfve73+FnP/uZ09K6msbGRkSjUfz85z/HE088gQMHDtRcbJ4tW7duxb59+3D//ffjwIEDmJ6edu7zer1417vehccffxxXXXUVdu/efVav/fOf/xwf/ehH8drXvhY333wznnnmGee/EydOnPOYKRQKhUKhXBjoNdti6DUbhUK5KFjvhHwKhbKYQqFgvvOd7zTr6+tNhmHMm266yTRN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",
      "text/plain": [
       "<Figure size 1200x200 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "az.plot_trace(sigmoid_hgf_idata, var_names=[\"tonic_volatility_2\"]);\n",
    "az.summary(sigmoid_hgf_idata, var_names=[\"tonic_volatility_2\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc1052c7-6278-4e98-9532-768be3c5edfe",
   "metadata": {},
   "source": [
    "The results above indicate that given the responses provided by the participant, the most likely values for the parameter $\\omega_2$ are between -4.9 and -3.1, with a mean at -3.9 (you can find slightly different values if you sample different actions from the decisions function). We can consider this as an excellent estimate given the sparsity of the data, and the complexity of the model."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1fb6a2e6-e5a5-42c0-a3bb-33569d390836",
   "metadata": {},
   "source": [
    "## Glossary\n",
    "\n",
    "```{glossary}\n",
    "\n",
    "Perceptual model\n",
    "    The perceptual model of a Hierarchical Gaussian Filter traditionally refers to the branch receiving observations $u$ about states of the world and that performs the updating of beliefs about these states. By generalisation, the perceptual model is any probabilistic network that can be created in [pyhgf](https://github.com/ComputationalPsychiatry/pyhgf), receiving an arbitrary number of inputs. An HGF that only consists of a perceptual model will act as a Bayesian filter.\n",
    "\n",
    "Response model\n",
    "    The response model of a Hierarchical Gaussian filter refers to the branch that uses the beliefs about the state of the world to generate actions using the {term}`Decision rule`. This branch is also sometimes referred to as the **decision model** or the **observation model**, depending on the fields. Critically, this part of the model can return the surprise ($-\\log[Pr(x)]$) associated with the observations (here, the observations include the inputs $u$ of the probabilistic network, but will also include the responses of the participant $y$ if there are some).\n",
    "\n",
    "Decision rule\n",
    "    The decision rule is a function stating how the agent selects among all possible actions, given the state of the beliefs in the perceptual model, and optionally additional parameters. Programmatically, this is a Python function taking a perceptual model as input (i.e. an instance of the HGF class), and returning a sequence of actions. This can be used for simulation. The decision rule should be clearly defined in order to write the {term}`Response function`.\n",
    "\n",
    "Response function\n",
    "    The response function is a term that we use specifically for this package ([pyhgf](https://github.com/ComputationalPsychiatry/pyhgf)). It refers to the Python function that, using a given HGF model and optional parameter, returns the surprise associated with the observed actions.\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "68510623-fdbd-468f-b67a-57faa51a439d",
   "metadata": {},
   "source": [
    "## System configuration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "9fd93ecb-3ba2-4148-bb80-096027161404",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T20:54:28.576112Z",
     "iopub.status.busy": "2025-05-11T20:54:28.575885Z",
     "iopub.status.idle": "2025-05-11T20:54:28.591263Z",
     "shell.execute_reply": "2025-05-11T20:54:28.590587Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Last updated: Sun May 11 2025\n",
      "\n",
      "Python implementation: CPython\n",
      "Python version       : 3.12.3\n",
      "IPython version      : 9.2.0\n",
      "\n",
      "pyhgf : 0.2.6\n",
      "jax   : 0.4.31\n",
      "jaxlib: 0.4.31\n",
      "\n",
      "sys       : 3.12.3 | packaged by conda-forge | (main, Apr 15 2024, 18:38:13) [GCC 12.3.0]\n",
      "arviz     : 0.21.0\n",
      "numpy     : 2.2.5\n",
      "matplotlib: 3.10.1\n",
      "jax       : 0.4.31\n",
      "pyhgf     : 0.2.6\n",
      "IPython   : 9.2.0\n",
      "pymc      : 5.22.0\n",
      "\n",
      "Watermark: 2.5.0\n",
      "\n"
     ]
    }
   ],
   "source": [
    "%load_ext watermark\n",
    "%watermark -n -u -v -iv -w -p pyhgf,jax,jaxlib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5aa8dbc2",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    }
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "88f0312ebce741a7ac4b43c2b174c2b1": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/output",
       "_model_module_version": "1.0.0",
       "_model_name": "OutputModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/output",
       "_view_module_version": "1.0.0",
       "_view_name": "OutputView",
       "layout": "IPY_MODEL_b25e967e33114f468ae6881b299dd6c4",
       "msg_id": "",
       "outputs": [
        {
         "data": {
          "text/html": "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">                                                                                                                   \n <span style=\"font-weight: bold\"> Progress                 </span> <span style=\"font-weight: bold\"> Draws </span> <span style=\"font-weight: bold\"> Divergences </span> <span style=\"font-weight: bold\"> Step size </span> <span style=\"font-weight: bold\"> Grad evals </span> <span style=\"font-weight: bold\"> Sampling Speed  </span> <span style=\"font-weight: bold\"> Elapsed </span> <span style=\"font-weight: bold\"> Remaining </span> \n ───────────────────────────────────────────────────────────────────────────────────────────────────────────────── \n  <span style=\"color: #1f77b4; text-decoration-color: #1f77b4\">━━━━━━━━━━━━━━━━━━━━━━━━</span>   2000    0             1.81        3            1579.35 draws/s   0:00:01   0:00:00    \n  <span style=\"color: #1f77b4; text-decoration-color: #1f77b4\">━━━━━━━━━━━━━━━━━━━━━━━━</span>   2000    0             1.93        1            789.04 draws/s    0:00:02   0:00:00    \n                                                                                                                   \n</pre>\n",
          "text/plain": "                                                                                                                   \n \u001b[1m \u001b[0m\u001b[1mProgress                \u001b[0m\u001b[1m \u001b[0m \u001b[1m \u001b[0m\u001b[1mDraws\u001b[0m\u001b[1m \u001b[0m \u001b[1m \u001b[0m\u001b[1mDivergences\u001b[0m\u001b[1m \u001b[0m \u001b[1m \u001b[0m\u001b[1mStep size\u001b[0m\u001b[1m \u001b[0m \u001b[1m \u001b[0m\u001b[1mGrad evals\u001b[0m\u001b[1m \u001b[0m \u001b[1m \u001b[0m\u001b[1mSampling Speed \u001b[0m\u001b[1m \u001b[0m \u001b[1m \u001b[0m\u001b[1mElapsed\u001b[0m\u001b[1m \u001b[0m \u001b[1m \u001b[0m\u001b[1mRemaining\u001b[0m\u001b[1m \u001b[0m \n ───────────────────────────────────────────────────────────────────────────────────────────────────────────────── \n  \u001b[38;2;31;119;180m━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m   2000    0             1.81        3            1579.35 draws/s   0:00:01   0:00:00    \n  \u001b[38;2;31;119;180m━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m   2000    0             1.93        1            789.04 draws/s    0:00:02   0:00:00    \n                                                                                                                   \n"
         },
         "metadata": {},
         "output_type": "display_data"
        }
       ],
       "tabbable": null,
       "tooltip": null
      }
     },
     "b25e967e33114f468ae6881b299dd6c4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
